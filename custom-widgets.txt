This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-13T17:37:37.693Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  workflows/
    build.node.js.yml
    tagged-release.yml
examples/
  angular/
    config.js
    index.html
    index.js
  jquery/
    index.html
    index.js
  knockout/
    index.html
    index.js
  react/
    index.html
    index.js
  vue/
    index.html
    index.js
src/
  images/
    barrating.svg
    datepicker.svg
    editor.svg
    microphone.svg
    nouislider.svg
    sortablejs.svg
    tagbox.svg
  bootstrap-slider.js
  bootstrapdatepicker.js
  ck-editor.js
  easy-autocomplete.js
  emotionsratings.js
  icheck.js
  inputmask.js
  jquery-bar-rating.js
  jquery-ui-datepicker.js
  microphone.js
  nouislider.js
  pretty-checkbox.js
  select2-tagbox.js
  select2.js
  sortablejs.js
  surveyjs-widgets.js
  targetREADME.md
testcafe/
  all-widgets.ts
  helper.js
  nouislider.ts
  tagbox.ts
.gitignore
.prettierrc
.travis.yml
CHANGELOG.md
deploy_npm.sh
devops-integration.yml
LICENSE
package.json
README.md
release-azure-pipeline.yml
webpack.config.js

================================================================
Repository Files
================================================================

================
File: .github/workflows/build.node.js.yml
================
# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build.Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test --if-present

================
File: .github/workflows/tagged-release.yml
================
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASEWORKFLOW }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: Release ${{ github.ref }}
          draft: false
          prerelease: false

================
File: examples/angular/config.js
================
System.config({
    //use typescript for compilation
    transpiler: 'typescript',
    //typescript compiler options
    typescriptOptions: {
        emitDecoratorMetadata: true
    },
    paths: {
        'npm:': 'https://unpkg.com/'
    },
    //map tells the System loader where to look for things
    map: {

        'app': './src',

        '@angular/core': 'npm:@angular/core/bundles/core.umd.js',
        '@angular/common': 'npm:@angular/common/bundles/common.umd.js',
        '@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js',
        '@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',
        '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',
        '@angular/http': 'npm:@angular/http/bundles/http.umd.js',
        '@angular/router': 'npm:@angular/router/bundles/router.umd.js',
        '@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js',

        '@angular/core/testing': 'npm:@angular/core/bundles/core-testing.umd.js',
        '@angular/common/testing': 'npm:@angular/common/bundles/common-testing.umd.js',
        '@angular/compiler/testing': 'npm:@angular/compiler/bundles/compiler-testing.umd.js',
        '@angular/platform-browser/testing': 'npm:@angular/platform-browser/bundles/platform-browser-testing.umd.js',
        '@angular/platform-browser-dynamic/testing': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic-testing.umd.js',
        '@angular/http/testing': 'npm:@angular/http/bundles/http-testing.umd.js',
        '@angular/router/testing': 'npm:@angular/router/bundles/router-testing.umd.js',

        'rxjs': 'npm:rxjs',
        'typescript': 'npm:typescript@2.0.2/lib/typescript.js'
    },
    //packages defines our app package
    packages: {
        app: {
            main: './index.js',
            defaultExtension: 'js'
        },
        rxjs: {
            defaultExtension: 'js'
        }
    }
});

================
File: examples/angular/index.html
================
<!DOCTYPE html>
<html>

<head>
    <title>Welcome to Angular</title>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/es5-shim/4.5.14/es5-shim.min.js"></script>
    <script src="https://npmcdn.com/zone.js@0.6.12?main=browser"></script>
    <script src="https://npmcdn.com/reflect-metadata@0.1.3"></script>
    <script src="https://npmcdn.com/rxjs@5.0.0-beta.6/bundles/Rx.umd.js"></script>
    <script src="https://npmcdn.com/@angular/core@2.0.0-rc.5/bundles/core.umd.js"></script>
    <script src="https://npmcdn.com/@angular/common@2.0.0-rc.5/bundles/common.umd.js"></script>
    <script src="https://npmcdn.com/@angular/compiler@2.0.0-rc.5/bundles/compiler.umd.js"></script>
    <script src="https://npmcdn.com/@angular/platform-browser@2.0.0-rc.5/bundles/platform-browser.umd.js"></script>
    <script
        src="https://npmcdn.com/@angular/platform-browser-dynamic@2.0.0-rc.5/bundles/platform-browser-dynamic.umd.js"></script>

    <script src="https://unpkg.com/jquery"></script>
    <link rel="stylesheet" href="https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css">
    <link href="https://unpkg.com/survey-core/defaultV2.min.css" type="text/css" rel="stylesheet">

    <!-- custom widgets -->
    <!-- select2 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/css/select2.min.css" rel="stylesheet" />
    <!-- select2 -->
    <!-- sortable -->
    <script src="https://unpkg.com/sortablejs@1.7.0/Sortable.js"></script>
    <!-- bootstrap-datepicker -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css"
        type="text/css" rel="stylesheet" />
    <!-- bootstrap-datepicker -->
    <!-- jquery-ui-datepicker -->
    <script src="https://code.jquery.com/ui/1.11.4/jquery-ui.min.js"></script>
    <link href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/themes/smoothness/jquery-ui.css" type="text/css"
        rel="stylesheet" />
    <!-- jquery-ui-datepicker -->

    <script src="https://unpkg.com/easy-autocomplete"></script>
    <link rel="stylesheet" href="https://unpkg.com/easy-autocomplete@1.3.5/dist/easy-autocomplete.css">
    <!-- eo custom widgets-->
    <script src="https://unpkg.com/survey-angular"></script>    

    <script src="../../package/surveyjs-widgets.js"></script>
</head>

<body>
    <ng-app></ng-app>
    <div id="surveyResult">
    </div>
    <script src="./index.js"></script>
</body>

</html>

================
File: examples/angular/index.js
================
function init() {
    var json = { questions: [
        { type: "dropdown", renderAs: "select2", choicesByUrl: { url: "https://surveyjs.io/api/CountriesExample" }, name: "countries", title: "Please select the country you have arrived from:"}
    ]};
Survey.defaultBootstrapCss.navigationButton = "btn btn-primary";
Survey.StylesManager.applyTheme("defaultV2");

    var model = new Survey.Model(json);
    window.survey = model;

    function onAngularComponentInit() {
        Survey.SurveyNG.render("surveyElement", {model:model});
    }
    var HelloApp =
        ng.core
            .Component({
                selector: 'ng-app',
                template: '<div id="surveyContainer" class="survey-container contentcontainer codecontainer">' +
                '<div id="surveyElement"></div></div>'
            })
            .Class({
                constructor: function() {
                },
                ngOnInit: function() {
                    onAngularComponentInit();
                }
            });
    document.addEventListener('DOMContentLoaded', function() {
        ng.platformBrowserDynamic.bootstrap(HelloApp);
    });

}

if(!window["%hammerhead%"]) {
    init();
}

================
File: examples/jquery/index.html
================
<!DOCTYPE html>
<html>
<head>
    <title>Welcome to JQuery</title>
    <script src="https://unpkg.com/jquery"></script>
    <link rel="stylesheet" href="https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css">

    <!-- custom widgets -->
    <!-- select2 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/css/select2.min.css" rel="stylesheet" />
    <!-- select2 -->
    <!-- sortable -->
    <script src="https://unpkg.com/sortablejs@1.7.0/Sortable.js"></script>
    <!-- bootstrap-datepicker -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css"
        type="text/css" rel="stylesheet" />
    <!-- bootstrap-datepicker -->
    <!-- jquery-ui-datepicker -->
    <script src="https://code.jquery.com/ui/1.11.4/jquery-ui.min.js"></script>
    <link href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/themes/smoothness/jquery-ui.css" type="text/css"
        rel="stylesheet" />
    <!-- jquery-ui-datepicker -->

    <script src="https://unpkg.com/easy-autocomplete"></script>
    <link rel="stylesheet" href="https://unpkg.com/easy-autocomplete@1.3.5/dist/easy-autocomplete.css">
    <!-- eo custom widgets-->

    <script src="https://unpkg.com/survey-jquery"></script>    
    <script src="../../package/surveyjs-widgets.js"></script>
</head>

<body>
    <div id="surveyElement">
    </div>
    <div id="surveyResult">
    </div>
    <script src="./index.js"></script>
</body>

</html>

================
File: examples/jquery/index.js
================
function init() {
  //$.material.init();

  var json = {
    questions: [
      {
        type: "dropdown",
        renderAs: "select2",
        choicesByUrl: { url: "https://restcountries.eu/rest/v1/all" },
        name: "countries",
        title: "Please select the country you have arrived from:"
      },
      {
        name: "date",
        type: "datepicker",
        inputType: "date",
        title: "Your favorite date:",
        dateFormat: "mm/dd/yy",
        isRequired: true
      },
      {
        name: "autocomplete1",
        title: "Easy-autocomplete:",
        type: "text",
        choices: [
          "fontawesome-stars",
          "css-stars",
          "bars-pill",
          "bars-1to10",
          "bars-movie",
          "bars-square",
          "bars-reversed",
          "bars-horizontal",
          "bootstrap-stars",
          "fontawesome-stars-o"
        ]
      }
    ]
  };

  Survey.defaultBootstrapCss.navigationButton = "btn btn-primary";
  //Survey.Survey.cssType = "bootstrapmaterial";
  Survey.Model.cssType = "bootstrap";

  var model = new Survey.Model(json);
  window.survey = model;

  $("#surveyElement").Survey({
    model: survey
  });
}

if (!window["%hammerhead%"]) {
  init();
}

================
File: examples/knockout/index.html
================
<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Use options to customize the Survey Creator, Survey Creator Example</title><meta name="viewport" content="width=device-width"/>
        <script src="https://unpkg.com/jquery"></script>
        <script src="https://unpkg.com/knockout@3.5.1/build/output/knockout-latest.js"></script>
        
        <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.10/ace.min.js" type="text/javascript" charset="utf-8"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.10/ext-language_tools.js" type="text/javascript" charset="utf-8"></script>
        <link rel="stylesheet" href="https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css">

        <script src="https://unpkg.com/sortablejs@1.7.0/Sortable.js"></script><link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/css/select2.min.css" rel="stylesheet"/>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/js/select2.min.js"></script>
        <script src="https://unpkg.com/nouislider@9.2.0/distribute/nouislider.js"></script>
        <script src="https://unpkg.com/wnumb@1.1.0"></script><link href="https://unpkg.com/nouislider@9.2.0/distribute/nouislider.min.css" rel="stylesheet"/>
        
        <!-- bootstrap-datepicker -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.js"></script>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css"
            type="text/css" rel="stylesheet" />
        <!-- bootstrap-datepicker -->
        <!-- jquery-ui-datepicker -->
        <script src="https://unpkg.com/jquery-ui-dist/jquery-ui.min.js"></script>
        <link rel="stylesheet" href="https://unpkg.com/jquery-ui-dist/jquery-ui.css" />
            <!-- jquery-ui-datepicker -->

        <script src="https://unpkg.com/survey-knockout/survey.ko.min.js"></script>
        <link rel="stylesheet" href="https://unpkg.com/survey-knockout/defaultV2.min.css" />
        <script src="https://unpkg.com/survey-creator/survey-creator.min.js"></script>
        <link href="https://unpkg.com/survey-creator/survey-creator.min.css" type="text/css" rel="stylesheet"/>
        <script src="../../package/surveyjs-widgets.js"></script>
    <body>
        <div id="surveyElement">
        </div>
        <div id="surveyResult">
        </div>
        <script type="text/javascript" src="./index.js"></script>
    </body>
</html>

================
File: examples/knockout/index.js
================
function init() {

    var json = {
        questions: [
            {
                type: "dropdown",
                renderAs: "select2",
                choicesByUrl: { url: "https://surveyjs.io/api/CountriesExample" },
                name: "countries",
            },
            {
                name: "date",
                type: "datepicker",
                inputType: "date",
                dateFormat: "mm/dd/yy",
                isRequired: true
            },
            {
                name: "autocomplete",
                type: "text",
                choices: [
                    "fontawesome-stars",
                    "css-stars",
                    "bars-pill",
                    "bars-1to10",
                    "bars-movie",
                    "bars-square",
                    "bars-reversed",
                    "bars-horizontal",
                    "bootstrap-stars",
                    "fontawesome-stars-o"
                ]
            }
        ]
    };

    var model = new Survey.Model(json);
    window.survey = model;

    model.render("surveyElement");
}

if(!window["%hammerhead%"]) {
    init();
}

================
File: examples/react/index.html
================
<!DOCTYPE html>
<html>

<head>
    <title>Welcome to React</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.6.0/polyfill.js"></script>
    <script src="https://unpkg.com/react@16.5.0/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16.5.0/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone@7.2.5/babel.min.js"></script>


    <script src="https://unpkg.com/jquery"></script>
    <link rel="stylesheet" href="https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css">

    <!-- custom widgets -->
    <!-- select2 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/css/select2.min.css" rel="stylesheet" />
    <!-- select2 -->
    <!-- sortable -->
    <script src="https://unpkg.com/sortablejs@1.7.0/Sortable.js"></script>
    <!-- bootstrap-datepicker -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css"
        type="text/css" rel="stylesheet" />
    <!-- bootstrap-datepicker -->
    <!-- jquery-ui-datepicker -->
    <script src="https://unpkg.com/jquery-ui-dist/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/jquery-ui-dist/jquery-ui.css" />
    <!-- jquery-ui-datepicker -->

    <script src="https://unpkg.com/easy-autocomplete"></script>
    <link rel="stylesheet" href="https://unpkg.com/easy-autocomplete@1.3.5/dist/easy-autocomplete.css">
    <!-- eo custom widgets-->


    <script src="https://unpkg.com/survey-react"></script>
    <link rel="stylesheet" href="https://unpkg.com/survey-react/defaultV2.min.css" />
    <!-- <script src="http://127.0.0.1:7777/build/survey-react/survey.react.js"></script>  -->

    <script src="../../package/surveyjs-widgets.js"></script>
</head>

<body>
    <div id="surveyElement">
    </div>
    <div id="surveyResult">
    </div>
    <script type="text/babel" src="./index.js"></script>
</body>

</html>

================
File: examples/react/index.js
================
function init() {
    var json = {
        questions: [
            {
                type: "dropdown",
                renderAs: "select2",
                choicesByUrl: { url: "https://surveyjs.io/api/CountriesExample" },
                name: "countries",
            },
            {
                name: "date",
                type: "datepicker",
                inputType: "date",
                dateFormat: "mm/dd/yy",
                isRequired: true
            },
            {
                name: "autocomplete",
                type: "text",
                choices: [
                    "fontawesome-stars",
                    "css-stars",
                    "bars-pill",
                    "bars-1to10",
                    "bars-movie",
                    "bars-square",
                    "bars-reversed",
                    "bars-horizontal",
                    "bootstrap-stars",
                    "fontawesome-stars-o"
                ]
            }
        ]
    };

    var model = new Survey.Model(json);
    window.survey = model;

    survey
    .onComplete
    .add(function (result) {
        document
            .querySelector('#surveyResult')
            .textContent = "Result JSON:\n" + JSON.stringify(result.data, null, 3);
    });
        
    ReactDOM.render(<Survey.Survey model={model} />, document.getElementById("surveyElement"));

}

if(!window["%hammerhead%"]) {
    init();
}

================
File: examples/vue/index.html
================
<!DOCTYPE html>
<html>

<head>
    <title>Welcome to Vue</title>
    <script src="https://unpkg.com/vue@2.6.14/dist/vue.js"></script>

    <script src="https://unpkg.com/jquery"></script>
    <link rel="stylesheet" href="https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css">

    <!-- custom widgets -->
    <!-- select2 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/css/select2.min.css" rel="stylesheet" />
    <!-- select2 -->
    <!-- sortable -->
    <script src="https://unpkg.com/sortablejs@1.7.0/Sortable.js"></script>
    <!-- bootstrap-datepicker -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css"
        type="text/css" rel="stylesheet" />
    <!-- bootstrap-datepicker -->
    <!-- jquery-ui-datepicker -->
    <script src="https://unpkg.com/jquery-ui-dist/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/jquery-ui-dist/jquery-ui.css" />
    <!-- jquery-ui-datepicker -->

    <script src="https://unpkg.com/easy-autocomplete"></script>
    <link rel="stylesheet" href="https://unpkg.com/easy-autocomplete@1.3.5/dist/easy-autocomplete.css">
    <!-- eo custom widgets-->

    <script src="https://unpkg.com/survey-vue"></script>
    <link rel="stylesheet" href="https://unpkg.com/survey-vue/defaultV2.min.css" />
    <!-- <script src="http://127.0.0.1:8080/packages/survey-vue/survey.vue.js"></script>  -->

    <script src="../../package/surveyjs-widgets.js"></script>
</head>

<body>
    <div id="surveyElement">
        <survey :survey='survey' />
    </div>
    <div id="surveyResult">
    </div>
    <script src="./index.js"></script>
</body>

</html>

================
File: examples/vue/index.js
================
function init() {

    var json = {
        questions: [
            {
                type: "dropdown",
                renderAs: "select2",
                choicesByUrl: { url: "https://surveyjs.io/api/CountriesExample" },
                name: "countries",
            },
            {
                name: "date",
                type: "datepicker",
                inputType: "date",
                dateFormat: "mm/dd/yy",
                isRequired: true
            },
            {
                name: "autocomplete",
                type: "text",
                choices: [
                    "fontawesome-stars",
                    "css-stars",
                    "bars-pill",
                    "bars-1to10",
                    "bars-movie",
                    "bars-square",
                    "bars-reversed",
                    "bars-horizontal",
                    "bootstrap-stars",
                    "fontawesome-stars-o"
                ]
            }
        ]
    };

    var model = new Survey.Model(json);
    window.survey = model;

    var app = new Vue({
        el: '#surveyElement',
        data: {
            survey: model
        }
    });

}

if(!window["%hammerhead%"]) {
    init();
}

================
File: src/images/barrating.svg
================
<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
<g>
	<path d="M12.1,15l-4.6-2.4L2.9,15l0.9-5.1L0,6.3l5.2-0.7L7.5,1l2.3,4.6L15,6.3l-3.8,3.6L12.1,15z"/>
</g>
</svg>

================
File: src/images/datepicker.svg
================
<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
<g>
	<rect x="3" y="7" width="2" height="2"/>
	<rect x="7" y="11" width="2" height="2"/>
	<rect x="3" y="11" width="2" height="2"/>
	<rect x="11" y="11" width="2" height="2"/>
	<rect x="11" y="7" width="2" height="2"/>
	<path d="M10,6H6v4h4V6z M9,9H7V7h2V9z"/>
	<rect x="4" width="1" height="3"/>
	<rect x="11" width="1" height="3"/>
	<path d="M13,2v2h-3V2H6v2H3V2H0v14h16V2H13z M15,15H1V5h14V15z"/>
</g>
</svg>

================
File: src/images/editor.svg
================
<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
<g>
	<polygon points="1,3 3,3 3,8 2,8 2,9 3,9 5,9 6,9 6,8 5,8 5,3 7,3 7,4 8,4 8,1 7,1 0,1 0,2 0,3 0,4 1,4 	"/>
	<rect x="10" y="5" width="6" height="1"/>
	<rect x="10" y="8" width="6" height="1"/>
	<rect y="11" width="16" height="1"/>
	<rect y="14" width="16" height="1"/>
</g>
</svg>

================
File: src/images/microphone.svg
================
<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
<g>
	<path d="M11,3.4C11,2.1,9.9,1,8.6,1H8.4C7.1,1,6,2.1,6,3.4V5h5V3.4z"/>
	<path d="M8.4,10h0.3C9.9,10,11,8.9,11,7.6V6H6v1.6C6,8.9,7.1,10,8.4,10z"/>
	<path d="M12,6v0.9c0,2.2-1.6,4.1-3.5,4.1S5,9.1,5,6.9V6H4v1c0,2.5,1.8,4.6,4,4.9V14H6v1h5v-1H9v-2.1
		c2.2-0.3,4-2.4,4-4.9V6H12z"/>
</g>
</svg>

================
File: src/images/nouislider.svg
================
<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
<rect y="10" width="16" height="2"/>
<polygon points="2,4 2,7 4,9 6,7 6,4 "/>
<polygon points="10,4 10,7 12,9 14,7 14,4 "/>
</svg>

================
File: src/images/sortablejs.svg
================
<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
<path d="M7 1h9v2H7zM9 6h7v2H9zM11 11h5v2h-5zM5 10l1 1c-2.2 0-4-1.8-4-4 0-1.9 1.3-3.4 3-3.9v-2C2.2 1.5 0 4 0 7c0 3.3 2.7 6 5.9 6H6l-1 1 1 1 3-3-3-3-1 1z"></path>
</svg>

================
File: src/images/tagbox.svg
================
<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
<g>
	<path d="M15,11H0V5h15V11z M1,10h13V6H1V10z"/>
</g>
<rect x="2" y="7" width="4" height="2"/>
<rect x="7" y="7" width="4" height="2"/>
</svg>

================
File: src/bootstrap-slider.js
================
var Slider = require("bootstrap-slider");

const componentName = "bootstrapslider";

function init(Survey) {
  var widget = {
    name: componentName,
    title: "Bootstrap Slider",
    iconName: "icon-bootstrap-slider",
    widgetIsLoaded: function () {
      return typeof Slider !== "undefined";
    },
    isFit: function (question) {
      return question.getType() === componentName;
    },
    htmlTemplate: "<div></div>",
    activatedByChanged: function (activatedBy) {
      Survey.Serializer.addClass(componentName, [], null, "empty");
      let registerQuestion = Survey.ElementFactory.Instance.registerCustomQuestion;
      if(!!registerQuestion) registerQuestion(componentName);
      Survey.Serializer.addProperties(componentName, [
        {
          name: "step:number",
          default: 1,
          category: "general",
        },
        {
          name: "rangeMin:number",
          default: 0,
          category: "general",
        },
        {
          name: "rangeMax:number",
          default: 100,
          category: "general",
        },
        {
          name: "orientation",
          default: "horizontal",
          choices: ["horizontal", "vertical"],
          category: "general"
        },
      ]);
      Survey.Serializer.addProperty(componentName, {
        name: "config",
        default: null,
        category: "general",
      });
    },
    afterRender: function (question, el) {
      el.style.paddingTop = "20px";
      el.style.paddingBottom = "17px";
      el.style.paddingLeft = "10px";
      var inputEl = document.createElement("input");
      inputEl.id = question.id;
      inputEl.type = "text";
      inputEl.setAttribute("data-slider-id", question.name + "_" + question.id);
      inputEl.setAttribute("data-slider-min", question.rangeMin);
      inputEl.setAttribute("data-slider-max", question.rangeMax);
      inputEl.setAttribute("data-slider-step", question.step);
      if(question.orientation == "vertical") {
        inputEl.setAttribute("data-slider-orientation", "vertical");
      }
      inputEl.setAttribute("data-slider-step", question.step);
      inputEl.setAttribute(
        "data-slider-value",
        question.value || question.rangeMin
      );
      el.appendChild(inputEl);

      var config = question.config || {};

      if (config.id === undefined) {
        config.id = question.name + "_" + question.id;
      }

      if (config.min === undefined) {
        config.min = question.rangeMin;
      }

      if (config.max === undefined) {
        config.max = question.rangeMax;
      }

      if (config.step === undefined) {
        config.step = question.step;
      }

      if (config.enabled === undefined) {
        config.enabled = !question.isReadOnly;
      }

      if (config.value === undefined) {
        config.value = question.value || question.rangeMin;
      }

      var slider = new Slider(inputEl, config);

      slider.on("change", function (valueObj) {
        question.value = slider.getValue();
      });
      var updateValueHandler = function () {
        slider.setValue(question.value || question.rangeMin);
      };
      question.readOnlyChangedCallback = function () {
        if (question.isReadOnly) {
          slider.disable();
        } else {
          slider.enable();
        }
      };
      question.bootstrapSlider = slider;
      question.valueChangedCallback = updateValueHandler;
    },
    willUnmount: function (question, el) {
      question.bootstrapSlider && question.bootstrapSlider.destroy();
      question.bootstrapSlider = null;
      question.readOnlyChangedCallback = null;
    },
    pdfRender: function (_, options) {
      if (options.question.getType() === componentName) {
        var point = options.module.SurveyHelper.createPoint(
          options.module.SurveyHelper.mergeRects.apply(null, options.bricks)
        );
        point.xLeft += options.controller.unitWidth;
        point.yTop +=
          options.controller.unitHeight *
          options.module.FlatQuestion.CONTENT_GAP_VERT_SCALE;
        var rect = options.module.SurveyHelper.createTextFieldRect(
          point,
          options.controller
        );
        var textboxBrick = new options.module.TextFieldBrick(
          options.question,
          options.controller,
          rect,
          true,
          options.question.id,
          (
            options.question.value ||
            options.question.defaultValue ||
            ""
          ).toString(),
          "",
          options.question.isReadOnly,
          false,
          "text"
        );
        options.bricks.push(textboxBrick);
      }
    },
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "customtype");
}

if (typeof Survey !== "undefined") {
  init(Survey);
}

export default init;

================
File: src/bootstrapdatepicker.js
================
function init(Survey, $) {
  const iconId = "icon-datepicker";
  const componentName = "bootstrapdatepicker";
  Survey.SvgRegistry && Survey.SvgRegistry.registerIconFromSvg(iconId, require('svg-inline-loader?classPrefix!./images/datepicker.svg'), "");
  $ = $ || window.$;

  if (
    !!$ &&
    !$.fn.bootstrapDP &&
    !!$.fn.datepicker &&
    !!$.fn.datepicker.noConflict
  ) {
    $.fn.bootstrapDP = $.fn.datepicker.noConflict();
    if (!$.fn.datepicker) {
      $.fn.datepicker = $.fn.bootstrapDP;
    }
  }
  var widget = {
    name: componentName,
    title: "Date picker",
    iconName: iconId,
    widgetIsLoaded: function () {
      return !!$ && !!$.fn.bootstrapDP;
    },
    isFit: function (question) {
      return question.getType() === componentName;
    },
    htmlTemplate:
      "<input class='form-control widget-datepicker' type='text' style='width: 100%;'>",
    activatedByChanged: function (activatedBy) {
      Survey.Serializer.addClass(
        componentName,
        [
          { name: "inputType", visible: false },
          { name: "inputFormat", visible: false },
          { name: "inputMask", visible: false },
        ],
        null,
        "text"
      );
      let registerQuestion = Survey.ElementFactory.Instance.registerCustomQuestion;
      if(!!registerQuestion) registerQuestion(componentName);
      Survey.Serializer.addProperties(componentName, [
        {
          // Can take a string or an Object.
          // https://bootstrap-datepicker.readthedocs.io/en/latest/options.html#format
          name: "dateFormat",
          category: "general",
          default: "mm/dd/yyyy",
        },
        {
          // Can take a Date or a string
          // https://bootstrap-datepicker.readthedocs.io/en/latest/options.html#options
          name: "startDate",
          category: "general",
          default: "",
        },
        {
          // Can take a Date or a string
          // https://bootstrap-datepicker.readthedocs.io/en/latest/options.html#options
          name: "endDate",
          category: "general",
          default: "",
        },
        {
          name: "todayHighlight:boolean",
          category: "general",
          default: true,
        },
        {
          name: "weekStart:number",
          category: "general",
          default: 0,
        },
        {
          name: "clearBtn:boolean",
          category: "general",
          default: false,
        },
        {
          name: "autoClose:boolean",
          category: "general",
          default: true,
        },
        {
          name: "daysOfWeekDisabled:string",
          category: "general",
          default: "",
        },
        {
          name: "daysOfWeekHighlighted:string",
          category: "general",
          default: "",
        },
        {
          name: "disableTouchKeyboard:boolean",
          category: "general",
          default: true,
        },
      ]);
    },
    afterRender: function (question, el) {
      var $el = $(el).is(".widget-datepicker")
        ? $(el)
        : $(el).find(".widget-datepicker");
      const options = {
        enableOnReadonly: false,
        format: question.dateFormat,
        todayHighlight: question.todayHighlight,
        weekStart: question.weekStart,
        clearBtn: question.clearBtn,
        autoclose: question.autoClose,
        zIndexOffset: 20,
        daysOfWeekDisabled: question.daysOfWeekDisabled,
        daysOfWeekHighlighted: question.daysOfWeekHighlighted,
        disableTouchKeyboard: question.disableTouchKeyboard,
      };
      if (!!question.startDate || !!question.renderedMin) {
        options.startDate = !!question.startDate
          ? question.startDate
          : question.renderedMin;
      }
      var renderedMax = question.renderedMax;
      if (!!renderedMax && new Date(renderedMax).getFullYear() >= 2999) {
        renderedMax = undefined;
      }
      if (!!question.endDate || !!renderedMax) {
        options.endDate = !!question.endDate ? question.endDate : renderedMax;
      }
      const pickerWidget = $el.bootstrapDP(options).on("change", function (e) {
        var newDate = pickerWidget.bootstrapDP("getUTCDate");
        var newValue = newDate && newDate.toUTCString();
        if (question.value != newValue) {
          question.value = newValue;
        }
      })

      question.valueChangedCallback = function () {
        pickerWidget.bootstrapDP(
          "setUTCDate",
          !!question.value ? new Date(question.value) : ""
        );
      };
      question.valueChangedCallback();
      question.readOnlyChangedCallback = function () {
        if (question.isReadOnly) {
          $el.prop("readonly", true);
        } else {
          $el.removeAttr("readonly");
        }
      };
      question.readOnlyChangedCallback();
    },
    willUnmount: function (question, el) {
      var $el = $(el).is(".widget-datepicker")
        ? $(el)
        : $(el).find(".widget-datepicker");
      $el.bootstrapDP("destroy");
      question.readOnlyChangedCallback = undefined;
      question.valueChangedCallback = undefined;
    },
    pdfQuestionType: "text",
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "customtype");
}

if (typeof Survey !== "undefined") {
  init(Survey, window.$);
}

export default init;

================
File: src/ck-editor.js
================
function init(Survey) {
  const iconId = "icon-editor";
  const componentName = "editor";
  Survey.SvgRegistry && Survey.SvgRegistry.registerIconFromSvg(iconId, require('svg-inline-loader!./images/editor.svg'), "");
  var widget = {
    name: componentName,
    title: "Editor",
    iconName: iconId,
    widgetIsLoaded: function () {
      return typeof CKEDITOR != "undefined";
    },
    isFit: function (question) {
      return question.getType() === componentName;
    },
    htmlTemplate:
      "<textarea rows='10' cols='80' style: {width:'100%'}></textarea>",
    activatedByChanged: function (activatedBy) {
      Survey.Serializer.addClass(componentName, [], null, "empty");
      let registerQuestion = Survey.ElementFactory.Instance.registerCustomQuestion;
      if(!!registerQuestion) registerQuestion(componentName);
      Survey.Serializer.addProperty(componentName, {
        name: "height",
        default: 300,
        category: "general",
      });
    },
    afterRender: function (question, el) {
      var name = question.inputId;
      CKEDITOR.editorConfig = function (config) {
        config.language = "es";
        config.height = question.height;
        config.toolbarCanCollapse = true;
      };
      el.name = name;

      if (CKEDITOR.instances[name]) {
        CKEDITOR.instances[name].removeAllListeners();
        CKEDITOR.remove(CKEDITOR.instances[name]);
      }

      var editor = CKEDITOR.replace(el);
      CKEDITOR.instances[name].config.readOnly = question.isReadOnly;

      var isValueChanging = false;
      var updateValueHandler = function () {
        if (isValueChanging || typeof question.value === "undefined") return;
        editor.setData(question.value);
      };
      editor.on("change", function () {
        isValueChanging = true;
        question.value = editor.getData();
        isValueChanging = false;
      });

      question.valueChangedCallback = updateValueHandler;
      question.readOnlyChangedCallback = function () {
        if (question.isReadOnly) {
          editor.setReadOnly(true);
        } else {
          editor.setReadOnly(false);
        }
      };
      updateValueHandler();
    },
    willUnmount: function (question, el) {
      question.readOnlyChangedCallback = null;
      CKEDITOR.instances[question.inputId].destroy(false);
    },
    pdfRender: function (survey, options) {
      if (options.question.getType() === componentName) {
        const loc = new Survey.LocalizableString(survey, true);
        loc.text = options.question.value || options.question.defaultValue;
        options.question["locHtml"] = loc;
        if (
          options.question.renderAs === "standard" ||
          options.question.renderAs === "image"
        ) {
          options.question["renderAs"] = options.question.renderAs;
        } else options.question["renderAs"] = "auto";
        const flatHtml = options.repository.create(
          survey,
          options.question,
          options.controller,
          "html"
        );
        return new Promise(function (resolve) {
          flatHtml.generateFlats(options.point).then(function (htmlBricks) {
            options.bricks = htmlBricks;
            resolve();
          });
        });
      }
    },
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "customtype");
}

if (typeof Survey !== "undefined") {
  init(Survey);
}

export default init;

================
File: src/easy-autocomplete.js
================
function init(Survey, $) {
  $ = $ || window.$;
  var widget = {
    name: "autocomplete",
    widgetIsLoaded: function () {
      return typeof $ == "function" && !!$.fn.easyAutocomplete;
    },
    isFit: function (question) {
      return question.getType() === "text";
    },
    isDefaultRender: true,
    activatedByChanged: function (activatedBy) {
      if (!!Survey.Serializer.findProperty("text", "choices") || !!Survey.Serializer.findProperty("text", "choicesByUrl")) return;
      Survey.Serializer.addProperty("text", {
        name: "choices:itemvalues",
        category: "choices",
        categoryIndex: 1,
      });
      Survey.Serializer.addProperty("text", {
        name: "choicesByUrl:restfull",
        className: "ChoicesRestfull",
        category: "choicesByUrl",
        visible: false,
        categoryIndex: 2,
      });
      Survey.Serializer.addProperty("text", {
        name: "config",
        category: "general",
        visible: false,
      });
    },
    afterRender: function (question, el) {
      var $el = $(el).is("input") ? $(el) : $(el).find("input");

      var getCssSelectorFromClassesString = function (classesString) {
        if (!classesString) return "";
        var cssSelector = classesString.replace(/(^\s*)|(\s+)/g, "."); // replace whitespaces with '.'
        return cssSelector;
      };

      var questionRootClasses = getCssSelectorFromClassesString(
        question.cssRoot
      );

      var questionRoot = $el.parents(questionRootClasses)[0];
      if (!!questionRootClasses && !!questionRoot) {
        questionRoot.style.overflow = "visible";
      }

      var config = question.config;
      var options =
        config && typeof config == "string" ? JSON.parse(config) : config;
      if (!options) options = {};

      options.data = (question.choices || []).map(function (item) {
        return item.text;
      });
      if (options.adjustWidth === undefined) {
        options.adjustWidth = false;
      }
      if (!options.list) {
        options.list = {
          sort: {
            enabled: true,
            method: (aStr, bStr) => {
              const inputStr = $el.val().toLowerCase();
              const aIndex = aStr.toLowerCase().indexOf(inputStr);
              const bIndex = bStr.toLowerCase().indexOf(inputStr);
              return aIndex - bIndex;
            }
          },
          match: {
            enabled: true,
          },
          onChooseEvent: function () {
            var selectedData = $el.getSelectedItemData();
            if(!!selectedData && typeof selectedData === "object" 
              && !!question.choicesByUrl && !!question.choicesByUrl.valueName) {
              selectedData = selectedData[question.choicesByUrl.valueName];
            }
            question.value = selectedData;
          },
        };
      }
      if (!options.placeholder) {
        options.placeholder = question.placeholder;
      }

      if (!!question.choicesByUrl) {
        options.url = function (phrase) {
          return question.choicesByUrl.url;
        };
        options.getValue = question.choicesByUrl.valueName;
        // options.ajaxSettings = {
        //   dataType: "jsonp"
        // };
      }
      $el.easyAutocomplete(options);

      $el[0].oninput = function () {
        question.customWidgetData.isNeedRender = true;
      };
      var updateHandler = function () {
        $el[0].value =
          typeof question.value === "undefined" ? "" : question.value;
      };
      question.valueChangedCallback = updateHandler;
      updateHandler();
    },
    willUnmount: function (question, el) {
      // var $el = $(el).find("input");
      // $el.autocomplete("destroy");
    },
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget);
}

if (typeof Survey !== "undefined") {
  init(Survey, window.jQuery);
}

export default init;

================
File: src/emotionsratings.js
================
function init(Survey, $) {
  $ = $ || window.$;
  const componentName = "emotionsratings";
  var widget = {
    name: componentName,
    title: "Emotions Ratings",
    iconName: "icon-emotionsratings",
    widgetIsLoaded: function () {
      return typeof $ == "function" && !!$.fn.emotionsRating;
    },
    defaultJSON: {
      choices: [1, 2, 3, 4, 5],
    },
    isFit: function (question) {
      return question.getType() === componentName;
    },
    isDefaultRender: false,
    htmlTemplate: "<div style='height: 33px'></div>",
    activatedByChanged: function (activatedBy) {
      Survey.Serializer.addClass(
        componentName,
        [
          {
            name: "hasOther",
            visible: false,
          },
          {
            name: "otherText",
            visible: false,
          },
          {
            name: "optionsCaption",
            visible: false,
          },
          {
            name: "otherErrorText",
            visible: false,
          },
          {
            name: "storeOthersAsComment",
            visible: false,
          },
          {
            name: "renderAs",
            visible: false,
          },
        ],
        null,
        "dropdown"
      );
      let registerQuestion = Survey.ElementFactory.Instance.registerCustomQuestion;
      if(!!registerQuestion) registerQuestion(componentName);
      Survey.Serializer.addProperties(componentName, [
        {
          name: "emotions:itemvalues",
          category: "emotions",
          categoryIndex: 1,
          default: ["angry", "disappointed", "meh", "happy", "inLove"],
        },
        {
          name: "emotionSize:number",
          category: "emotions",
          default: 30,
        },
        {
          name: "emotionsCount:number",
          category: "emotions",
          default: 5,
        },
        {
          name: "bgEmotion",
          category: "emotions",
          default: "happy",
        },
        {
          name: "emotionColor",
          category: "emotions",
          default: "#FF0066",
        },
      ]);
    },
    afterRender: function (question, el) {
      var emotions = (question.emotions || []).map(function (item) {
        return item.value;
      });
      if (emotions.length === 0) {
        emotions = ["angry", "disappointed", "meh", "happy", "inLove"];
      }
      var options = {
        emotionSize: question.emotionSize,
        bgEmotion: question.bgEmotion,
        emotions: emotions,
        initialRating: question.value,
        color: question.emotionColor,
        count: question.emotionsCount,
        onUpdate: function (value) {
          question.value = value;
        },
      };
      initWidget();

      question.valueChangedCallback = initWidget;
      question.readOnlyChangedCallback = initWidget;

      function initWidget() {
        el.innerHTML = "<div></div>";
        $(el).off();
        options.initialRating = question.value || 0;
        options.disabled = question.isReadOnly;
        $(el).find("div").emotionsRating(options);
      }
    },
    willUnmount: function (question, el) {
      el.innerHTML = null;
      $(el).off();
      question.readOnlyChangedCallback = null;
      question.valueChangedCallback = null;
    },
    pdfQuestionType: "dropdown",
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "customtype");
}

if (typeof Survey !== "undefined") {
  init(Survey, window.jQuery);
}

export default init;

================
File: src/icheck.js
================
function escValue(val) {
  if (typeof val === "string") {
    return (val || "").replace(/(['])/g, "\\$1");
  }
  return val;
}

function init(Survey, $) {
  $ = $ || window.$;
  var widget = {
    className: "iradio_square-blue",
    checkboxClass: "iradio_square-blue",
    radioClass: "iradio_square-blue",
    name: "icheck",
    widgetIsLoaded: function () {
      return typeof $ == "function" && !!$.fn.iCheck;
    },
    isFit: function (question) {
      var t = question.getType();
      return t === "radiogroup" || t === "checkbox" || t === "matrix";
    },
    isDefaultRender: true,
    afterRender: function (question, el) {
      var rootWidget = this;
      var $el = $(el);

      $el.find(".sv-item__decorator").hide();

      $el.find("input").data({
        iCheck: undefined,
      });
      function getIndexByValue(arr, value) {
        if (!Array.isArray(arr)) return -1;
        for (var i = 0; i < arr.length; i++) {
          if (arr[i] == value) return i;
          if (!!arr[i] && arr[i].toString().toLowerCase() == value) return i;
        }
        return -1;
      }
      var frozeUpdating = false;
      var makeChoicesICheck = function () {
        var inputs = $el.find("input");
        inputs.iCheck({
          checkboxClass:
            question.checkboxClass ||
            rootWidget.checkboxClass ||
            rootWidget.className,
          radioClass:
            question.radioClass ||
            rootWidget.radioClass ||
            rootWidget.className,
        });
        inputs.on("ifChecked", function (event) {
          if (frozeUpdating) return;
          if (question.getType() === "matrix") {
            question.generatedVisibleRows.forEach(function (row, index, rows) {
              if (row.fullName === event.target.name) {
                row.value = event.target.value;
              }
            });
          } else if (question.getType() === "checkbox") {
            var oldValue = question.value || [];
            var index = getIndexByValue(oldValue, event.target.value);
            if (index === -1) {
              question.value = oldValue.concat([event.target.value]);
            }
          } else {
            question.value = event.target.value;
          }
        });

        inputs.on("ifUnchecked", function (event) {
          if (frozeUpdating) return;
          if (question.getType() === "checkbox") {
            var oldValue = (question.value || []).slice();
            var index = getIndexByValue(oldValue, event.target.value);
            if (index >= 0) {
              oldValue.splice(index, 1);
              question.value = oldValue;
            }
          }
        });
      };
      function uncheckIcheck(cEl) {
        cEl.iCheck("uncheck");
        cEl[0].parentElement.classList.remove("checked");
      }
      var select = function () {
        frozeUpdating = true;
        if (question.getType() !== "matrix") {
          var values = question.value;
          if (!Array.isArray(values)) {
            values = [values];
          }
          if (question.getType() == "checkbox") {
            var qValue = question.value;
            question.visibleChoices.forEach(function (item) {
              var inEl = $el.find(
                "input[value='" + escValue(item.value) + "']"
              );
              if (!inEl) return;
              var isChecked = getIndexByValue(qValue, item.value) > -1;
              if (isChecked) {
                inEl.iCheck("check");
              } else {
                var cEl = inEl[0];
                var wasChecked = !!cEl["checked"];
                if (wasChecked) {
                  inEl.removeAttr("checked");
                  if (!inEl.parent().hasClass("checked"))
                    setTimeout(function () {
                      uncheckIcheck(inEl);
                    });
                  else uncheckIcheck(inEl);
                }
              }
            });
          } else {
            values.forEach(function (value) {
              $el
                .find("input[value='" + escValue(value) + "']")
                .iCheck("check");
            });
          }
        } else {
          question.generatedVisibleRows.forEach(function (row, index, rows) {
            if (row.value) {
              $(el)
                .find(
                  "input[name='" +
                    row.fullName +
                    "'][value='" +
                    escValue(row.value) +
                    "']"
                )
                .iCheck("check");
            }
          });
        }
        frozeUpdating = false;
      };
      makeChoicesICheck();

      question.visibleChoicesChangedCallback = function () {
        makeChoicesICheck();
        $el.find(".sv-item__decorator").hide();
      };
      question.valueChangedCallback = select;
      select();
    },
    willUnmount: function (question, el) {
      var $el = $(el);
      $el.find("input").iCheck("destroy");
      question.visibleChoicesChangedCallback = null;
    },
  };

  Survey.Serializer.addProperty("radiogroup", {
    name: "radioClass",
    category: "general",
  });
  Survey.Serializer.addProperty("checkbox", {
    name: "checkboxClass",
    category: "general",
  });
  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "type");
}

if (typeof Survey !== "undefined") {
  init(Survey, window.jQuery);
}

export default init;

================
File: src/inputmask.js
================
import Inputmask from "inputmask";

function init(Survey) {
  const updateTextItemPropInfo = function (propJSON) {
    const name = propJSON.name;
    propJSON.onGetValue = (obj) => {
      return obj.editor[name];
    };
    propJSON.onSetValue = (obj, val) => {
      obj.editor[name] = val;
    }    
  }
  const updateColumnPropInfo = function (propJSON) {
    const name = propJSON.name;
    propJSON.visibleIf = (obj) => {
      return obj.cellType === "text";
    };
    propJSON.onGetValue = (obj) => {
      return obj.templateQuestion[name];
    };
    propJSON.onSetValue = (obj, val) => {
      obj.templateQuestion[name] = val;
    }    
  }
  var widget = {
    name: "maskedit",
    numericGroupSeparator: ",",
    numericRadixPoint: undefined,
    numericAutoGroup: true,
    numericDigits: 2,
    numericDigitsOptional: false,
    numericPlaceholder: "0",
    autoUnmask: true,
    clearIncomplete: true,
    showMaskOnHover: true,
    unmaskAsNumber: false,    
    widgetIsLoaded: function () {
      return typeof Inputmask != "undefined";
    },
    isFit: function (question) {
      if (question.getType() == "multipletext") return true;
      return (
        question.getType() == "text" &&
        (question.inputMask != "none" || question.inputFormat)
      );
    },
    isDefaultRender: true,
    activatedByChanged: function (activatedBy) {
      if (Survey.Serializer.findProperty("text", "inputMask")) return;
      var properties = [
        {
          name: "autoUnmask",
          type: "boolean",
          category: "general",
          showMode: "form",
          default: true,
        },
        {
          name: "clearIncomplete",
          type: "boolean",
          category: "general",
          showMode: "form",
          default: true,
        },
        {
          name: "showMaskOnHover",
          type: "boolean",
          category: "general",
          showMode: "form",
          default: true,
        },
        { 
          name: "inputFormat", 
          showMode: "form",
          category: "general" },
        {
          name: "inputMask",
          showMode: "form",
          category: "general",
          default: "none",
          choices: [
            "none",
            "datetime",
            "currency",
            "decimal",
            "email",
            "phone",
            "ip",
          ],
        },
        {
          name: "numericDigits",
          category: "general",
          visible: false,
        },
        {
          name: "numericGroupSeparator",
          category: "general",
          default: ",",
          visible: false,
        },
        {
          name: "options",
          category: "general",
          visible: false,
        },
        {
          name: "unmaskAsNumber:boolean",
          category: "general",
          visible: false,
        },
        {
          name: "prefix",
          category: "general",
          visible: false,
        },
        {
          name: "suffix",
          category: "general",
          visible: false,
        },
      ];
      Survey.Serializer.addProperties("text", properties);
      properties.forEach(prop => {
        if(prop.visible !== false) {
          updateTextItemPropInfo(prop);
        }
      });
      Survey.Serializer.addProperties("multipletextitem", properties);
      properties.forEach(prop => {
        if(prop.visible !== false) {
          updateColumnPropInfo(prop);
        }
      });
    },
    applyInputMask: function (surveyElement, el) {
      var rootWidget = this;
      var mask =
        surveyElement.inputMask !== "none"
          ? surveyElement.inputMask
          : surveyElement.inputFormat;
      var options = {};
      if (typeof surveyElement.options === "object") {
        for (var option in surveyElement.options) {
          options[option] = surveyElement.options[option];
        }
      }
      options.autoUnmask = typeof surveyElement.autoUnmask !== "undefined"
        ? surveyElement.autoUnmask
        : rootWidget.autoUnmask;
      options.clearIncomplete = typeof surveyElement.clearIncomplete !== "undefined"
        ? surveyElement.clearIncomplete
        : rootWidget.clearIncomplete;
      options.showMaskOnHover = typeof surveyElement.showMaskOnHover !== "undefined"
        ? surveyElement.showMaskOnHover
        : rootWidget.showMaskOnHover;
      options.unmaskAsNumber = typeof surveyElement.unmaskAsNumber !== "undefined"
          ? surveyElement.unmaskAsNumber
          : rootWidget.unmaskAsNumber;
      if (surveyElement.inputMask !== "none") {
        options.inputFormat = surveyElement.inputFormat;
      }
      if (
        surveyElement.inputMask === "currency" ||
        surveyElement.inputMask === "decimal"
      ) {
        options.groupSeparator = surveyElement.numericGroupSeparator || rootWidget.numericGroupSeparator;
        options.radixPoint = rootWidget.numericRadixPoint;
        options.autoGroup = rootWidget.numericAutoGroup;
        options.placeholder = rootWidget.numericPlaceholder;        
      }
      if (surveyElement.inputMask === "currency") {
        options.digits = surveyElement.numericDigits || rootWidget.numericDigits;
        options.digitsOptional = rootWidget.numericDigitsOptional;
        options.prefix = surveyElement.prefix || "";
        options.suffix = surveyElement.suffix || "";
        options.placeholder = rootWidget.numericPlaceholder;        
      }
      // if (surveyElement.inputMask == "datetime") {
      //   mask = surveyElement.inputFormat;
      // }
      if (surveyElement.inputMask === "phone" && !!surveyElement.inputFormat) {
        mask = surveyElement.inputFormat;
      }
      Inputmask(mask, options).mask(el);

      el.onblur = function () {
        if (!el.inputmask) return;
        if (surveyElement.value === el.inputmask.getemptymask()) {
          surveyElement.value = "";
        }
      };

      var customWidgetData =
        surveyElement.getType() === "multipletextitem"
          ? surveyElement.editorValue.customWidgetData
          : surveyElement.customWidgetData;
      el.oninput = function () {
        customWidgetData.isNeedRender = true;
      };

      var pushValueHandler = function () {        
        if (!el.inputmask) return;
        if (el.inputmask.isComplete()) {
          surveyElement.value = options.autoUnmask
            ? el.inputmask.unmaskedvalue()
            : el.value;
        } else {
          surveyElement.value = null;
        }
      };
      el.onfocusout = el.onchange = pushValueHandler;

      var updateHandler = function () {
        el.value =
          surveyElement.value === undefined || surveyElement.value === null
            ? ""
            : surveyElement.value;
      };
      surveyElement.valueChangedCallback = updateHandler;
      updateHandler();
    },
    afterRender: function (question, el) {      
      if (question.getType() != "multipletext") {
        var input = el.querySelector("input") || el;
        this.applyInputMask(question, input);
      } else {
        for (var i = 0; i < question.items.length; i++) {
          var item = question.items[i];
          if (item.inputMask != "none" || item.inputFormat) {
            var input = el.querySelector("#" + item.editor.inputId);
            if (input) {
              this.applyInputMask(item, input);
            }
          }
        }
      }
    },
    willUnmount: function (question, el) {
      var input = el.querySelector("input") || el;
      if (!!input && !!input.inputmask) {
        input.inputmask.remove();
      }
    },
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget);
}

if (typeof Survey !== "undefined") {
  init(Survey);
}

export default init;

================
File: src/jquery-bar-rating.js
================
function init(Survey, $) {
  const iconId = "icon-barrating";
  const componentName = "barrating";
  Survey.SvgRegistry && Survey.SvgRegistry.registerIconFromSvg(iconId, require('svg-inline-loader?classPrefix!./images/barrating.svg'), "");
  $ = $ || window.$;
  var widget = {
    name: componentName,
    title: "Bar rating",
    iconName: iconId,
    widgetIsLoaded: function () {
      return typeof $ == "function" && !!$.fn.barrating;
    },
    defaultJSON: { choices: [1, 2, 3, 4, 5] },
    isFit: function (question) {
      return question.getType() === componentName;
    },
    isDefaultRender: true,
    activatedByChanged: function (activatedBy) {
      Survey.Serializer.addClass(
        componentName,
        [
          { name: "hasOther", visible: false },
          { name: "otherText", visible: false },
          { name: "optionsCaption", visible: false },
          { name: "otherErrorText", visible: false },
          { name: "storeOthersAsComment", visible: false },
          { name: "renderAs", visible: false },
          { name: "select2Config", visible: false },
        ],
        null,
        "dropdown"
      );
      let registerQuestion = Survey.ElementFactory.Instance.registerCustomQuestion;
      if(!!registerQuestion) registerQuestion(componentName);
      Survey.Serializer.addProperty(componentName, {
        name: "showValues:boolean",
        default: false,
        category: "general",
      });
      Survey.Serializer.addProperty(componentName, {
        name: "ratingTheme",
        category: "general",
        default: "css-stars",
        choices: [
          "fontawesome-stars",
          "css-stars",
          "bars-pill",
          "bars-1to10",
          "bars-movie",
          "bars-reversed",
          "bars-horizontal",
          "fontawesome-stars-o",
        ],
      });
    },
    afterRender: function (question, el) {
      var $customSelect;
      var $questionInput;
      var contentContainer = $(el).is("select")
        ? $(el).parent().parent()[0]
        : $(el).parent()[0];
      var renderCustomSelect = function () {
        $customSelect = $("<select class='sv-widget-select'></select>");
        question.visibleChoices.forEach(function (choice) {
          $customSelect.append(
            '<option value="{0}">{1}</option>'.format(choice.value, choice.text)
          );
        });
        $questionInput = $(contentContainer).find(
          '[id="{0}"]'.format(question.inputId)
        );

        $questionInput.css("display", "none");
        $questionInput.after($customSelect);
        $customSelect[0].selectedIndex = -1;
      };
      var removeCustomSelect = function () {
        $questionInput.css("display", "");
        $customSelect.barrating("destroy");
        $customSelect.remove();
      };
      var renderBarrating = function () {
        $customSelect.barrating("show", {
          theme: question.ratingTheme,
          initialRating: question.value,
          showValues: question.showValues,
          showSelectedRating: false,
          readonly: question.isReadOnly,
          onSelect: function (value, text) {
            valueChangingByWidget = true;
            question.value = value;
            valueChangingByWidget = false;
          },
        });
      };
      renderCustomSelect();
      renderBarrating();
      if (!!$customSelect.parents()[0])
        $customSelect.parents()[0].style.marginBottom = "3px";
      var valueChangingByWidget = false;

      question.valueChangedCallback = function () {
        if (
          !valueChangingByWidget &&
          $(contentContainer).find("select.sv-widget-select")[0].value !==
            question.value
        ) {
          $(contentContainer)
            .find("select.sv-widget-select")
            .barrating("set", question.value);
        }
      };
      question.__barratingOnPropertyChangedCallback = function (
        sender,
        options
      ) {
        if (options.name === "ratingTheme" || options.name === "showValues") {
          $customSelect.barrating("destroy");
          renderBarrating();
        }
      };
      question.onPropertyChanged.add(
        question.__barratingOnPropertyChangedCallback
      );
      question.readOnlyChangedCallback = function () {
        removeCustomSelect();
        renderCustomSelect();
        renderBarrating();
      };
      question.visibleChoicesChangedCallback = function () {
        renderBarrating();
      };
    },
    willUnmount: function (question, el) {
      var $contentContainer = $(el).is("select")
        ? $(el).parent().parent()
        : $(el).parent();
      var $el = $contentContainer.find("select.sv-widget-select");
      $el.barrating("destroy");
      $el.remove();
      question.valueChangedCallback = undefined;
      question.onPropertyChanged.remove(
        question.__barratingOnPropertyChangedCallback
      );
      question.__barratingOnPropertyChangedCallback = undefined;
    },
    pdfQuestionType: "dropdown",
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "customtype");
}

if (typeof Survey !== "undefined") {
  init(Survey, window.$);
}

export default init;

================
File: src/jquery-ui-datepicker.js
================
function init(Survey, $) {
  const iconId = "icon-datepicker";
  const componentName = "datepicker";
  Survey.SvgRegistry && Survey.SvgRegistry.registerIconFromSvg(iconId, require('svg-inline-loader?classPrefix!./images/datepicker.svg'), "");
  $ = $ || window.$;
  if (
    !!$ &&
    !$.fn.bootstrapDP &&
    !!$.fn.datepicker &&
    !!$.fn.datepicker.noConflict
  ) {
    $.fn.bootstrapDP = $.fn.datepicker.noConflict();
    if (!$.fn.datepicker) {
      $.fn.datepicker = $.fn.bootstrapDP;
    }
  }
  var widget = {
    name: componentName,
    title: "Date picker",
    iconName: iconId,
    widgetIsLoaded: function () {
      return !!$ && !!$.fn.datepicker && !$.fn.datepicker.noConflict;
    },
    isFit: function (question) {
      return question.getType() === componentName;
    },
    htmlTemplate: "<input class='form-control widget-datepicker' type='text'>",
    activatedByChanged: function (activatedBy) {
      Survey.Serializer.addClass(
        componentName,
        [
          { name: "inputType", visible: false },
          { name: "inputFormat", visible: false },
          { name: "inputMask", visible: false },
        ],
        null,
        "text"
      );
      let registerQuestion = Survey.ElementFactory.Instance.registerCustomQuestion;
      if(!!registerQuestion) registerQuestion(componentName);
      Survey.Serializer.addProperty(componentName, {
        name: "dateFormat",
        category: "general",
      });
      Survey.Serializer.addProperty(componentName, {
        name: "config",
        category: "general",
        visible: false,
        default: null,
      });
      Survey.Serializer.addProperty(componentName, {
        name: "maxDate",
        category: "general",
      });
      Survey.Serializer.addProperty(componentName, {
        name: "minDate",
        category: "general",
      });
      Survey.Serializer.addProperty(componentName, {
        name: "disableInput:boolean",
        category: "general",
      });
    },
    afterRender: function (question, el) {
      var $el = $(el).is(".widget-datepicker")
        ? $(el)
        : $(el).find(".widget-datepicker");
      $el.addClass(question.css.text.root);
      var isSelecting = false;
      var config = $.extend(true, {}, question.config || {});
      if (!!question.placeHolder) {
        $el.attr("placeholder", question.placeHolder);
      }
      if (config.dateFormat === undefined) {
        config.dateFormat = !!question.dateFormat
          ? question.dateFormat
          : undefined;
      }
      if (config.option === undefined) {
        config.option = {
          minDate: null,
          maxDate: null,
        };
      }
      if (!!question.minDate) {
        config.minDate = question.minDate;
      }
      if (!!question.maxDate) {
        config.maxDate = question.maxDate;
      }
      if (!!question.renderedMin) {
        config.minDate = new Date(question.renderedMin);
      }
      if (!!question.renderedMax) {
        config.maxDate = new Date(question.renderedMax);
      }
      config.disabled = question.isReadOnly;
      if (config.onSelect === undefined) {
        config.onSelect = function (dateText) {
          isSelecting = true;
          setDateIntoQuestion();
          isSelecting = false;
          this.fixFocusIE = true;
        };
      }
      config.fixFocusIE = false;
      config.onClose = function (dateText, inst) {
        this.fixFocusIE = true;
      };
      config.beforeShow = function (input, inst) {
        var result = !!navigator.userAgent.match(/Trident\/7\./)
          ? !this.fixFocusIE
          : true;
        this.fixFocusIE = false;
        return result;
      };
      function setDateIntoQuestion() {
        var val = $el.datepicker('getDate');
        var d = new Date();
        val.setHours(d.getHours());
        val.setMinutes(d.getMinutes());
        val.setSeconds(d.getSeconds());
        question.value = val;
      }
      var pickerWidget = $el.datepicker(config).on("change", function (e) {
        setDateIntoQuestion();
      });

      $el.keyup(function (e) {
        if (e.keyCode == 8 || e.keyCode == 46) {
          $.datepicker._clearDate(this);
        }
      });
      if(question.disableInput) {
        $el.attr("readOnly", "true");
      }

      question.readOnlyChangedCallback = function () {
        $el.datepicker("option", "disabled", question.isReadOnly);
      };
      function updateDate() {
        if (!question.isEmpty()) {
          var val = question.value;
          if(typeof val === "string") {
            val = new Date(val);
          }
          pickerWidget.datepicker("setDate", val);
        } else {
          pickerWidget.datepicker("setDate", null);
        }
      }
      question.registerFunctionOnPropertyValueChanged(
        "dateFormat",
        function () {
          question.dateFormat &&
            pickerWidget.datepicker(
              "option",
              "dateFormat",
              question.dateFormat
            );
          updateDate();
        }
      );
      question.valueChangedCallback = function () {
        if (!isSelecting) {
          updateDate();
          $el.blur();
        }
      };
      question.valueChangedCallback();
    },
    willUnmount: function (question, el) {
      var $el = $(el).is(".widget-datepicker")
        ? $(el)
        : $(el).find(".widget-datepicker");
      $el.datepicker("destroy");
    },
    pdfQuestionType: "text",
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "customtype");
}

if (typeof Survey !== "undefined") {
  init(Survey, window.jQuery);
}

export default init;

================
File: src/microphone.js
================
import RecordRTC from "recordrtc";

function init(Survey) {
  const iconId = "icon-microphone";
  const componentName = "microphone";
  Survey.SvgRegistry && Survey.SvgRegistry.registerIconFromSvg(iconId, require('svg-inline-loader?classPrefix!./images/microphone.svg'), "");
  var widget = {
    name: componentName,
    title: "Microphone",
    iconName: iconId,
    widgetIsLoaded: function() {
      return typeof RecordRTC != "undefined";
    },
    isFit: function(question) {
      return question.getType() === componentName;
    },
    htmlTemplate:
      "<div style='height: 39px'>" +
      "<button type='button'  title='Record' style='vertical-align: top; margin-top: 3px' ><i class='fa fa-microphone' aria-hidden='true'></i></button>" +
      "&nbsp;<button type='button' title='Save' style='vertical-align: top; margin-top: 3px'><i class='fa fa-cloud' aria-hidden='true' ></i></button>" +
      "&nbsp;<audio style='" +
      "vertical-align: top;" +
      "margin-left: 10px;" +
      "height:35px;" +
      "-moz-box-shadow: 2px 2px 4px 0px #006773;" +
      "-webkit-box-shadow:  2px 2px 4px 0px #006773;" +
      "box-shadow: 2px 2px 4px 0px #006773;" +
      "' " +
      "controls='true' >" +
      "</audio>" +
      "</div>",
    activatedByChanged: function(activatedBy) {
      Survey.Serializer.addClass(componentName, [], null, "empty");
      let registerQuestion = Survey.ElementFactory.Instance.registerCustomQuestion;
      if(!!registerQuestion) registerQuestion(componentName);
    },
    afterRender: function(question, el) {
      var rootWidget = this;
      var buttonStartEl = el.getElementsByTagName("button")[0];
      var buttonStopEl = el.getElementsByTagName("button")[1];
      var audioEl = el.getElementsByTagName("audio")[0];
      var log = function(msg) {
        //console.log(msg);
      };
  
      //////////  RecordRTC logic

      var successCallback = function(stream) {
        var options = {
          type: "audio",
          mimeType: "audio/webm",
          audioBitsPerSecond: 44100,
          sampleRate: 44100,
          bufferSize: 16384,
          numberOfAudioChannels: 1
        };
        log("successCallback");
        question.survey.mystream = stream;
        question.survey.recordRTC = RecordRTC(
          question.survey.mystream,
          options
        );
        if (typeof question.survey.recordRTC != "undefined") {
          log("startRecording");
          question.recordingStartedAt = new Date();
          question.survey.recordRTC.startRecording();
        }
      };

      var errorCallback = function() {
        alert("No microphone");
        question.survey.recordRTC = undefined;
        question.survey.mystream = undefined;
      };

      var processAudio = function(audioVideoWebMURL) {
        log("processAudio");
        var recordedBlob = question.survey.recordRTC.getBlob();

        var fileReader = new FileReader();
        fileReader.onload = function(event) {
          var dataUri = event.target.result;
          log("dataUri: " + dataUri);
          question.value = dataUri;
          audioEl.src = dataUri;

          log("cleaning");
          question.survey.recordRTC = undefined;
          question.survey.mystream = undefined;
        };
        fileReader.readAsDataURL(recordedBlob);
      };

      var startRecording = function() {
        question.recordingStartedAt = undefined;
        question.recordingEndedAt = undefined;
        question.recordingDuration = undefined;
        // erase previous data
        question.value = undefined;

        // if recorder open on another question	- try to stop recording
        if (typeof question.survey.recordRTC != "undefined") {
          question.survey.recordRTC.stopRecording(doNothingHandler);
          if (typeof question.survey.mystream != "undefined") {
            question.survey.mystream.getAudioTracks().forEach(function(track) {
              track.stop();
            });
          }
        }

        var mediaConstraints = {
          video: false,
          audio: true
        };

        navigator.mediaDevices
          .getUserMedia(mediaConstraints)
          .then(successCallback.bind(this), errorCallback.bind(this));
      };

      var stopRecording = function() {
        log("stopRecording");
        var eD = new Date();
        question.recordingEndedAt = eD;
        question.recordingDuration = eD - question.recordingStartedAt;
        if (typeof question.survey.recordRTC != "undefined") {
          question.survey.recordRTC.stopRecording(processAudio.bind(this));
          if (typeof question.survey.mystream != "undefined") {
            question.survey.mystream.getAudioTracks().forEach(function(track) {
              track.stop();
            });
          }
        }
      };

      //////////////  end RTC logic //////////////////

      if (!question.isReadOnly) {
        buttonStartEl.onclick = startRecording;
      } else {
        buttonStartEl.parentNode.removeChild(buttonStartEl);
      }

      if (!question.isReadOnly) {
        buttonStopEl.onclick = stopRecording;
      } else {
        buttonStopEl.parentNode.removeChild(buttonStopEl);
      }

      audioEl.src = question.value;

      var updateValueHandler = function() {};

      var doNothingHandler = function() {};

      question.valueChangedCallback = updateValueHandler;
      updateValueHandler();
    },
    willUnmount: function(question, el) {
      if (typeof question.survey.recordRTC != "undefined") {
        question.survey.recordRTC.stopRecording(doNothingHandler);
        if (typeof question.survey.mystream != "undefined") {
          question.survey.mystream.getAudioTracks().forEach(function(track) {
            track.stop();
          });
        }
        question.value = undefined;
        question.survey.recordRTC = undefined;
        question.survey.mystream = undefined;
      }
    }
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "customtype");
}

if (typeof Survey !== "undefined") {
  init(Survey);
}

export default init;

================
File: src/nouislider.js
================
import noUiSlider from "nouislider";

function init(Survey) {
  const iconId = "icon-nouislider";
  const componentName = "nouislider";
  Survey.SvgRegistry && Survey.SvgRegistry.registerIconFromSvg(iconId, require('svg-inline-loader?classPrefix!./images/nouislider.svg'), "");
  var widget = {
    name: componentName,
    title: "noUiSlider",
    iconName: iconId,
    widgetIsLoaded: function () {
      return typeof noUiSlider != "undefined";
    },
    isFit: function (question) {
      return question.getType() === componentName;
    },
    htmlTemplate:
      "<div><div></div></div>",
    activatedByChanged: function (activatedBy) {
      Survey.Serializer.addClass(componentName, [], null, "empty");
      let registerQuestion = Survey.ElementFactory.Instance.registerCustomQuestion;
      if (!!registerQuestion) registerQuestion(componentName);
      Survey.Serializer.addProperties(componentName, [
        {
          name: "step:number",
          category: "slider",
          categoryIndex: 1,
          default: 1,
        },
        {
          name: "rangeMin:number",
          category: "slider",
          default: 0,
        },
        {
          name: "rangeMax:number",
          category: "slider",
          default: 100,
        },
        {
          name: "pipsMode",
          category: "slider",
          default: "positions",
        },
        {
          name: "pipsValues:itemvalues",
          category: "slider",
          default: [0, 25, 50, 75, 100],
        },
        {
          name: "pipsText:itemvalues",
          category: "slider",
          default: [0, 25, 50, 75, 100],
        },
        {
          name: "pipsDensity:number",
          category: "slider",
          default: 5,
        },
        {
          name: "orientation",
          category: "slider",
          default: "horizontal",
          choices: ["horizontal", "vertical"]
        },
        {
          name: "direction:string",
          category: "slider",
          default: "ltr",
        },
        {
          name: "tooltips:boolean",
          category: "slider",
          default: true,
        },
      ]);
    },
    afterRender: function (question, el) {
      el.style.paddingBottom = "19px";
      el.style.paddingLeft = "20px";
      el.style.paddingRight = "20px";
      el.style.paddingTop = "44px";
      el = el.children[0];
      el.style.marginBottom = "60px";
      if (question.orientation === "vertical") {
        el.style.height = "250px";
        el.style.marginLeft = "60px";
      }
      var slider = noUiSlider.create(el, {
        start: question.rangeMin <= question.value && question.value <= question.rangeMax ?
          question.value : (question.rangeMin + question.rangeMax) / 2,
        connect: [true, false],
        step: question.step,
        tooltips: question.tooltips,
        pips: {
          mode: question.pipsMode || "positions",
          values: question.pipsValues.map(function (pVal) {
            var pipValue = pVal;
            if (pVal.value !== undefined) {
              pipValue = pVal.value;
            }
            return parseInt(pipValue);
          }),
          density: question.pipsDensity || 5,
          format: {
            to: function (pVal) {
              var pipText = pVal;
              question.pipsText.map(function (el) {
                if (el.text !== undefined && pVal === el.value) {
                  pipText = el.text;
                }
              });
              return pipText;
            },
          },
        },
        range: {
          min: question.rangeMin,
          max: question.rangeMax,
        },
        orientation: question.orientation,
        direction: question.direction,
      });
      slider.on("change", function () {
        question.value = Number(slider.get());
      });
      question.updateSliderProperties = function () {
        const elems = document.getElementsByClassName("noUi-pips");
        if (elems.length > 0) elems[elems.length - 1].style.display = "none";
        if (elems.length > 1) elems[elems.length - 2].style.display = "none";
        var getStart = function (currentStart) {
          return question.rangeMin + Math.round((currentStart - question.rangeMin) / question.step) * question.step;
        }
        slider.updateOptions(
          {
            step: question.step,
            start: question.rangeMin <= question.value && question.value <= question.rangeMax ?
              getStart(question.value) : getStart((question.rangeMin + question.rangeMax) / 2),
            range: {
              min: question.rangeMin,
              max: question.rangeMax
            }
          }, true);
        slider.pips(
          {
            mode: question.pipsMode || "positions",
            values: question.pipsValues.map(function (pVal) {
              var pipValue = pVal;
              if (pVal.value !== undefined) {
                pipValue = pVal.value;
              }
              return parseInt(pipValue);
            }),
            density: question.pipsDensity || 5,
            format: {
              to: function (pVal) {
                var pipText = pVal;
                question.pipsText.map(function (el) {
                  if (el.text !== undefined && pVal === el.value) {
                    pipText = el.text;
                  }
                });
                return pipText;
              },
            },
          });
      };
      var updateValueHandler = function () {
        slider.set(question.value);
      };
      if (question.isReadOnly) {
        el.setAttribute("disabled", true);
      }
      updateValueHandler();
      question.noUiSlider = slider;
      question.registerFunctionOnPropertiesValueChanged(
        ["pipsValues", "step", "rangeMin", "rangeMax", "pipsMode", "pipsDensity"],
        question.updateSliderProperties
      );
      question.valueChangedCallback = updateValueHandler;
      question.readOnlyChangedCallback = function () {
        if (question.isReadOnly) {
          el.setAttribute("disabled", true);
        } else {
          el.removeAttribute("disabled");
        }
      };
    },
    willUnmount: function (question, el) {
      if (!!question.noUiSlider) {
        question.noUiSlider.destroy();
        question.noUiSlider = null;
      }
      question.readOnlyChangedCallback = null;
      question.valueChangedCallback = null;

      if (!question.updateSliderProperties) return;
      question.unRegisterFunctionOnPropertiesValueChanged(
        ["pipsValues", "step", "rangeMin", "rangeMax", "pipsMode", "pipsDensity"],
        question.updateSliderProperties
      );
      question.updateSliderProperties = undefined
    },
    pdfRender: function (_, options) {
      if (options.question.getType() === componentName) {
        var point = options.module.SurveyHelper.createPoint(
          options.module.SurveyHelper.mergeRects.apply(null, options.bricks)
        );
        point.xLeft += options.controller.unitWidth;
        point.yTop +=
          options.controller.unitHeight *
          options.module.FlatQuestion.CONTENT_GAP_VERT_SCALE;
        var rect = options.module.SurveyHelper.createTextFieldRect(
          point,
          options.controller
        );
        if (options.module.SurveyHelper.shouldRenderReadOnly(this.question, this.controller)) {
          options.bricks.push(new options.module.TextFieldBrick(
            options.question,
            options.controller,
            rect,
            true,
            options.question.id,
            options.question.value || options.question.defaultValue || "",
            "",
            options.question.isReadOnly,
            false,
            "text"
          ));
        } else {
          return new Promise(resolve => {
            options.module.SurveyHelper.createCommentFlat(point, options.question,
              options.controller, true, { rows: options.module.FlatTextbox.MULTILINE_TEXT_ROWS_COUNT }).then((brick) => {
                options.bricks.push(brick);
                resolve();
              })
          })
        }
      }
    },
  };
  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "customtype");
}

if (typeof Survey !== "undefined") {
  init(Survey);
}

export default init;

================
File: src/pretty-checkbox.js
================
function init(Survey) {
  var widget = {
    settings: {
      supportedTypes: ["radiogroup", "checkbox", "boolean"],
      radiogroup: {
        rootClass: "pretty p-default p-round",
        inputType: "radio",
        states: [{ stateClass: "state p-success", addOn: "" }],
      },
      checkbox: {
        rootClass: "pretty p-default",
        inputType: "checkbox",
        states: [{ stateClass: "state p-success", addOn: "" }],
      },
      boolean: {
        rootClass: "pretty p-icon p-default p-has-indeterminate",
        inputType: "checkbox",
        states: [
          { stateClass: "state p-success", addOn: "" },
          {
            stateClass: "state p-success p-is-indeterminate",
            iconClass: "icon mdi mdi-minus",
            addOn: "",
          },
        ],
      },
    },
    name: "pretty-checkbox",
    activatedBy: "property",
    widgetIsLoaded: function () {
      return true;
    },
    htmlTemplate: "<fieldset></fieldset>",
    isFit: function (question) {
      var isFitByType =
        widget.settings.supportedTypes.indexOf(question.getType()) !== -1;

      if (widget.activatedBy === "property") {
        return question["renderAs"] === "prettycheckbox" && isFitByType;
      } else if (widget.activatedBy === "type") {
        return isFitByType;
      }

      return false;
    },
    activatedByChanged: function (value) {
      if (this.widgetIsLoaded()) {
        widget.activatedBy = value;
      }
    },
    isDefaultRender: false,
    afterRender: function (question, element) {
      var itemInputs = {};
      var questionType = question.getType();
      var options = this.settings[questionType];
      var checkboxType = questionType === "checkbox";
      var radiogroupType = questionType === "radiogroup";
      var booleanType = questionType === "boolean";

      var inChangeHandler = false;
      var changeHandler = function (event) {
        inChangeHandler = true;
        try {
          var target = arguments[0].target;
          var targetValue = target.value;
          var targetChecked = target.checked;

          if (checkboxType) {
            var questionValue = question.createValueCopy() || [];
            var valueIndex = questionValue.indexOf(targetValue);
            if (targetChecked) {
              if (valueIndex === -1) {
                questionValue.push(targetValue);
              }
            } else {
              if (valueIndex !== -1) {
                questionValue.splice(valueIndex, 1);
              }
            }

            question.value = questionValue;
          } else if (radiogroupType) {
            question.value = targetValue;
          } else {
            question.value = targetChecked;
          }
        } finally {
          inChangeHandler = false;
        }
      };

      var itemWidth =
        question.colCount > 0 ? 100 / question.colCount + "%" : "";

      var choices = booleanType
        ? [{ locText: question.locTitle, value: !!question.value }]
        : question.visibleChoices;
      choices.forEach(function (choiceItem, index) {
        var input = document.createElement("input");
        input.type = options.inputType;
        input.name = question.name + (checkboxType ? "" + index : "");
        input.onchange = changeHandler;
        input.value = choiceItem.value;

        if (booleanType && question.value === null) {
          input.indeterminate = question.defaultValue === "indeterminate";
        }

        var controlRoot = document.createElement("div");
        controlRoot.className = options.rootClass;
        controlRoot.appendChild(input);

        options.states.forEach(function (state) {
          var stateRoot = document.createElement("div");
          stateRoot.className = state.stateClass;
          if (!!state.iconClass) {
            var icon = document.createElement("i");
            icon.className = state.iconClass;
            stateRoot.appendChild(icon);
          }

          var label = document.createElement("label");
          if (choiceItem.locText.hasHtml) {
            label.innerHTML = choiceItem.locText.html;
          } else {
            label.textContent = choiceItem.locText.renderedText;
          }
          stateRoot.appendChild(label);

          controlRoot.appendChild(stateRoot);
          if (!!state.addOn) {
            stateRoot.insertAdjacentHTML("afterbegin", state.addOn);
          }
        });

        var itemRoot = document.createElement("div");
        itemRoot.className = "sv_cw_pretty_checkbox_" + questionType;
        itemRoot.style.display = "inline-block";
        itemRoot.style.width = itemWidth;
        itemRoot.appendChild(controlRoot);

        element.appendChild(itemRoot);

        itemInputs[choiceItem.value] = input;
      });

      var updateValueHandler = function (newValue) {
        if (!inChangeHandler) {
          var checkedItems = newValue || [];
          if (radiogroupType || booleanType) {
            checkedItems = [newValue && newValue.toString()];
          }

          Object.values(itemInputs).forEach(function (inputItem) {
            if (checkedItems.indexOf(inputItem.value) !== -1) {
              inputItem.setAttribute("checked", undefined);
            } else {
              inputItem.removeAttribute("checked");
            }
          });
        }
      };
      var readOnlyHandler = function () {
        Object.values(itemInputs).forEach(function (inputItem) {
          if (question.isReadOnly) {
            inputItem.setAttribute("disabled", true);
          } else {
            inputItem.removeAttribute("disabled");
          }
        });
      };

      question.valueChangedCallback = updateValueHandler;
      question.readOnlyChangedCallback = readOnlyHandler;
      updateValueHandler(question.value);
      readOnlyHandler();
    },
    willUnmount: function (question, el) {
      question.valueChangedCallback = undefined;
      question.readOnlyChangedCallback = undefined;
    },
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "property");
}

if (typeof Survey !== "undefined") {
  init(Survey);
}

export default init;

================
File: src/select2-tagbox.js
================
function init(Survey, $) {
  const iconId = "icon-tagbox";
  const componentName = "tagbox";
  Survey.SvgRegistry && Survey.SvgRegistry.registerIconFromSvg(iconId, require('svg-inline-loader?classPrefix!./images/tagbox.svg'), "");
  $ = $ || window.$;
  var widget = {
    name: componentName,
    title: "Tag box",
    iconName: iconId,
    widgetIsLoaded: function () {
      return typeof $ == "function" && !!$.fn.select2;
    },
    defaultJSON: {
      choices: ["Item 1", "Item 2", "Item 3"],
    },
    htmlTemplate:
      "<div><select multiple='multiple' style='width: 100%;'></select><textarea></textarea></div>",
    isFit: function (question) {
      return question.getType() === componentName;
    },
    activatedByChanged: function (activatedBy) {
      if(Survey.Serializer.findClass(componentName)) return;
      Survey.Serializer.addClass(
        componentName,
        [
          { name: "hasOther:boolean", visible: false },
          { name: "hasSelectAll:boolean", visible: false },
          { name: "hasNone:boolean", visible: false },
          { name: "otherText", visible: false },
          { name: "selectAllText", visible: false },
          { name: "noneText", visible: false },
        ],
        null,
        "checkbox"
      );
      let registerQuestion = Survey.ElementFactory.Instance.registerCustomQuestion;
      if(!!registerQuestion) registerQuestion(componentName);
      Survey.Serializer.addProperty(componentName, {
        name: "select2Config",
        category: "general",
        default: null,
      });
      Survey.Serializer.addProperty(componentName, {
        name: "placeholder",
        category: "general",
        default: "",
      });
      Survey.Serializer.addProperty(componentName, {
        name: "allowAddNewTag:boolean",
        category: "general",
        default: false,
      });
    },
    fixStyles: function (el) {
      el.parentElement.querySelector(".select2-search__field").style.border =
        "none";
    },
    afterRender: function (question, el) {
      var self = this;
      var select2Config = question.select2Config;
      var settings =
        select2Config && typeof select2Config == "string"
          ? JSON.parse(select2Config)
          : select2Config;
      var $el = $(el).is("select") ? $(el) : $(el).find("select");

      self.willUnmount(question, el);

      if (!settings) settings = {};
      settings.placeholder = question.placeholder;
      settings.tags = question.allowAddNewTag;
      if (question.allowAddNewTag) {
        question.keepIncorrectValues = true;
      }
      settings.disabled = question.isReadOnly;
      settings.theme = "classic";
      if (!!question.maxSelectedChoices) {
        settings.maximumSelectionLength = question.maxSelectedChoices;
      }

      $el.select2(settings);

      var $otherElement = $(el).find("textarea");
      if (
        !!question.survey &&
        !!question.survey.css &&
        !!question.survey.css.checkbox
      ) {
        $otherElement.addClass(question.survey.css.checkbox.other);
      }
      $otherElement.placeholder = question.otherPlaceHolder;
      $otherElement.bind("input propertychange", function () {
        question.comment = $otherElement.val();
      });
      var updateComment = function () {
        $otherElement.val(question.comment);
        if (question.isOtherSelected) {
          $otherElement.show();
        } else {
          $otherElement.hide();
        }
      };

      self.fixStyles(el);
      var question;
      var updateValueHandler = function () {
        if (question.hasSelectAll && question.isAllSelected) {
          $el
            .val([question.selectAllItemValue.value].concat(question.value))
            .trigger("change");
        } else {
          $el.val(question.value).trigger("change");
        }
        self.fixStyles(el);
        updateComment();
      };
      var updateChoices = function () {
        $el.select2().empty();
        if (settings.ajax) {
          $el.select2(settings);
        } else {
          settings.data = question.visibleChoices.map(function (choice) {
            return {
              id: choice.value,
              text: choice.text,
            };
          });
          $el.select2(settings);
        }
        updateValueHandler();
      };
      var isAllItemSelected = function (value) {
        return (
          question.hasSelectAll && value === question.selectAllItemValue.value
        );
      };
      question._propertyValueChangedFnSelect2 = function () {
        updateChoices();
      };

      $otherElement.prop("disabled", question.isReadOnly);
      question.readOnlyChangedCallback = function () {
        $el.prop("disabled", question.isReadOnly);
        $otherElement.prop("disabled", question.isReadOnly);
      };
      question.registerFunctionOnPropertyValueChanged(
        "visibleChoices",
        question._propertyValueChangedFnSelect2
      );
      question.valueChangedCallback = updateValueHandler;
      $el.on("select2:select", function (e) {
        if (isAllItemSelected(e.params.data.id)) {
          question.selectAll();
        } else {
          question.value = (question.value || []).concat(e.params.data.id);
        }
        updateComment();
      });
      $el.on("select2:unselect", function (e) {
        const select2Val = e.params.data.id;
        if (isAllItemSelected(select2Val)) {
          question.clearValue();
        } else {
          const val = [].concat(question.renderedValue);
          if (Array.isArray(val)) {
            for (var i = 0; i < val.length; i++) {
              if (val[i] == select2Val || (!!val[i] && val[i].toString() == select2Val)) {
                val.splice(i, 1);
                question.renderedValue = val;
                break;
              }
            }
          }
        }
        updateComment();
      });
      updateChoices();
    },
    willUnmount: function (question, el) {
      if (!question._propertyValueChangedFnSelect2) return;

      var $select2 = $(el).find("select");
      if (!!$select2.data("select2")) {
        $select2.off("select2:select").select2("destroy");
      }
      question.readOnlyChangedCallback = null;
      question.valueChangedCallback = null;
      question.unRegisterFunctionOnPropertyValueChanged(
        "visibleChoices",
        question._propertyValueChangedFnSelect2
      );
      question._propertyValueChangedFnSelect2 = undefined;
    },
    pdfQuestionType: "checkbox",
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "customtype");
}

if (typeof Survey !== "undefined") {
  init(Survey, window.jQuery);
}

export default init;

================
File: src/select2.js
================
function init(Survey, $) {
  $ = $ || window.$;
  const componentName = "select2";
  var widget = {
    activatedBy: "property",
    name: componentName,
    widgetIsLoaded: function () {
      return typeof $ == "function" && !!$.fn.select2;
    },
    isFit: function (question) {
      if (widget.activatedBy == "property")
        return (
          question["renderAs"] === componentName &&
          question.getType() === "dropdown"
        );
      if (widget.activatedBy == "type")
        return question.getType() === "dropdown";
      if (widget.activatedBy == "customtype")
        return question.getType() === componentName;
      return false;
    },
    activatedByChanged: function (activatedBy) {
      if (!this.widgetIsLoaded()) return;
      widget.activatedBy = activatedBy;
      Survey.Serializer.removeProperty("dropdown", "renderAs");
      if (activatedBy == "property") {
        Survey.Serializer.addProperty("dropdown", {
          name: "renderAs",
          category: "general",
          default: "default",
          choices: [componentName, "default"],
        });
        Survey.Serializer.addProperty("dropdown", {
          dependsOn: "renderAs",
          category: "general",
          name: "select2Config",
          visibleIf: function (obj) {
            return obj.renderAs == componentName;
          },
        });
      }
      if (activatedBy == "customtype") {
        if(Survey.Serializer.findClass(componentName)) return;
        Survey.Serializer.addClass(componentName, [], null, "dropdown");
        let registerQuestion = Survey.ElementFactory.Instance.registerCustomQuestion;
        if(!!registerQuestion) registerQuestion(componentName);
          Survey.Serializer.addProperty(componentName, {
          name: "select2Config",
          category: "general",
          default: null,
        });
      }
    },
    htmlTemplate:
      "<div><select style='width: 100%;'></select><textarea></textarea></div>",
    afterRender: function (question, el) {
      var select2Config = question.select2Config;
      var settings =
        select2Config && typeof select2Config == "string"
          ? JSON.parse(select2Config)
          : select2Config;
      if (!settings) settings = {};
      var $el = $(el).is("select") ? $(el) : $(el).find("select");
      var $otherElement = $(el).find("textarea");
      $otherElement.addClass(question.cssClasses.other);
      $otherElement.bind("input propertychange", function () {
        if (isSettingValue) return;
        question.comment = $otherElement.val();
      });

      var updateComment = function () {
        $otherElement.val(question.comment);
        if (question.isOtherSelected) {
          $otherElement.show();
        } else {
          $otherElement.hide();
        }
      };
      var isSettingValue = false;
      var updateValueHandler = function () {
        if (isSettingValue) return;
        isSettingValue = true;
        if ($el.find('option[value="' + (question.value || "") + '"]').length) {
          $el.val(question.value).trigger("change");
        } else {
          if (
            question.value !== null &&
            question.value !== undefined &&
            !question.isOtherSelected
          ) {
            var newOption = new Option(
              question.value, //TODO if question value is object then need to improve
              question.value,
              true,
              true
            );
            $el.append(newOption).trigger("change");
          }
        }
        updateComment();
        isSettingValue = false;
      };
      var updateChoices = function () {
        $el.select2().empty();
        if (!settings.placeholder && question.showOptionsCaption) {
          settings.placeholder = question.optionsCaption;
          settings.allowClear = true;
        }
        if (!settings.theme) {
          settings.theme = "classic";
        }
        settings.disabled = question.isReadOnly;
        if (settings.ajax) {
          $el.select2(settings);
          question.keepIncorrectValues = true;
        } else {
          var data = [];
          if (!!settings.placeholder || question.showOptionsCaption) {
            data.push({ id: "", text: "" });
          }
          settings.data = data.concat(
            question.visibleChoices.map(function (choice) {
              return {
                id: choice.value,
                text: choice.text,
              };
            })
          );
          question.clearIncorrectValues();
          $el.select2(settings);
        }
        // fixed width accrording to https://stackoverflow.com/questions/45276778/select2-not-responsive-width-larger-than-container
        if (!!el.querySelector(".select2")) {
          el.querySelector(".select2").style.width = "100%";
        }
        if (!!el.nextElementSibling) {
          el.nextElementSibling.style.marginBottom = "1px";
        }
        updateValueHandler();
      };

      $otherElement.prop("disabled", question.isReadOnly);
      question.readOnlyChangedCallback = function () {
        $el.prop("disabled", question.isReadOnly);
        $otherElement.prop("disabled", question.isReadOnly);
      };

      question.registerFunctionOnPropertyValueChanged(
        "visibleChoices",
        function () {
          updateChoices();
        }
      );
      updateChoices();
      $el.on("change", function (e) {
        setTimeout(function () {
          question.renderedValue = e.target.value;
          updateComment();
        }, 1);
      });
      $el.on("select2:select", function (e) {
        setTimeout(function () {
          question.renderedValue = e.target.value;
          updateComment();
        }, 1);
      });
      $el.on("select2:opening", function (e) {
        if ($(this).data("unselecting")) {
          $(this).removeData("unselecting");
          e.preventDefault();
        }
      });
      $el.on("select2:unselecting", function (e) {
        $(this).data("unselecting", true);
        setTimeout(function () {
          question.renderedValue = null;
          updateComment();
        }, 1);
      });
      question.valueChangedCallback = updateValueHandler;
      updateValueHandler();
    },
    willUnmount: function (question, el) {
      question.readOnlyChangedCallback = null;
      question.valueChangedCallback = null;
      var $select2 = $(el).find("select");
      if (!!$select2.data(componentName)) {
        $select2
          .off("select2:select")
          .off("select2:unselecting")
          .off("select2:opening")
          .select2("destroy");
      }
    },
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget);
}

if (typeof Survey !== "undefined") {
  init(Survey, window.jQuery);
}

export default init;

================
File: src/sortablejs.js
================
import Sortable from "sortablejs";

function init(Survey) {
  const iconId = "icon-sortablejs";
  const componentName = "sortablelist";
  Survey.SvgRegistry && Survey.SvgRegistry.registerIconFromSvg(iconId, require('svg-inline-loader?classPrefix!./images/sortablejs.svg'), "");
  var widget = {
    name: componentName,
    title: "Sortable list",
    iconName: iconId,
    widgetIsLoaded: function () {
      return typeof Sortable != "undefined";
    },
    defaultJSON: { choices: ["Item 1", "Item 2", "Item 3"] },
    rootStyle: "width:100%:",
    areaStyle:
      "border: 1px solid #1ab394; width:100%; min-height:50px; margin-top:10px;",
    itemStyle: "background-color:#1ab394;color:#fff;margin:5px;padding:10px;",
    isFit: function (question) {
      return question.getType() === componentName;
    },
    htmlTemplate: "<div></div>",
    activatedByChanged: function (activatedBy) {
      Survey.Serializer.addClass(
        componentName,
        [
          { name: "hasOther", visible: false },
          { name: "storeOthersAsComment", visible: false },
          { name: "hasNone", visible: false },
          { name: "renderAs", visible: false },
          { name: "checkboxClass", visible: false },
          { name: "hasSelectAll", visible: false },
          { name: "noneText", visible: false },
          { name: "selectAllText", visible: false },
        ],
        null,
        "checkbox"
      );
      let registerQuestion = Survey.ElementFactory.Instance.registerCustomQuestion;
      if(!!registerQuestion) registerQuestion(componentName);
      Survey.Serializer.addProperty(componentName, {
        name: "emptyText",
        default: "Move items here.",
        category: "general",
      });
      Survey.Serializer.addProperty(componentName, {
        name: "useDefaultTheme:switch",
        default: true,
        category: "general",
      });
      Survey.Serializer.addProperty(componentName, {
        name: "maxAnswersCount:number",
        default: -1,
        category: "general",
      });
    },
    afterRender: function (question, el) {
      var self = this;

      if (!question.useDefaultTheme) {
        self.rootStyle = "";
        self.itemStyle = "";
        self.areaStyle = "";
      }
      el.style.cssText = self.rootStyle;
      el.className = "sjs-sortablejs-root";
      var source, result;
      var resultEl = document.createElement("div");
      var emptyEl = document.createElement("span");
      var sourceEl = document.createElement("div");

      resultEl.style.cssText = self.areaStyle;
      resultEl.style.boxSizing = "border-box";
      resultEl.className = "sjs-sortablejs-result";

      emptyEl.innerHTML = question.emptyText;
      resultEl.appendChild(emptyEl);

      sourceEl.style.cssText = self.areaStyle;
      sourceEl.style.boxSizing = "border-box";
      sourceEl.className = "sjs-sortablejs-source";
      el.appendChild(resultEl);
      el.appendChild(sourceEl);
      var hasValueInResults = function (val) {
        var res = question.value;
        if (!Array.isArray(res)) return false;
        for (var i = 0; i < res.length; i++) {
          if (res[i] == val) return true;
        }
        return false;
      };
      var addChoiceToWidget = function (choice, inResults) {
        var srcEl = inResults ? resultEl : sourceEl;
        var newEl = document.createElement("div");
        newEl.className = "sjs-sortablejs-item";
        newEl.style.cssText = self.itemStyle;
        newEl.innerText = choice.text;
        newEl.dataset["value"] = choice.value;
        srcEl.appendChild(newEl);
        choice.onPropertyChanged.add(function (sender, options) {
          newEl.innerText = sender.text;
        });
      };
      var getChoicesNotInResults = function () {
        var res = [];
        question.visibleChoices.forEach(function (choice) {
          if (!hasValueInResults(choice.value)) {
            res.push(choice);
          }
        });
        return res;
      };
      var getChoicesInResults = function () {
        var res = [];
        var val = question.value;
        if (!Array.isArray(val)) return res;
        for (var i = 0; i < val.length; i++) {
          var item = Survey.ItemValue.getItemByValue(
            question.visibleChoices,
            val[i]
          );
          if (!!item) {
            res.push(item);
          }
        }
        return res;
      };
      var isUpdatingQuestionValue = false;
      var updateValueHandler = function () {
        if (isUpdatingQuestionValue) return;
        resultEl.innerHTML = "";
        resultEl.appendChild(emptyEl);
        sourceEl.innerHTML = "";
        var notInResults = getChoicesNotInResults();
        var inResults = getChoicesInResults();
        emptyEl.style.display = inResults.length > 0 ? "none" : "";
        inResults.forEach(function (choice) {
          addChoiceToWidget(choice, true);
        });
        notInResults.forEach(function (choice) {
          addChoiceToWidget(choice, false);
        });
      };
      result = question.resultEl = Sortable.create(resultEl, {
        animation: 150,
        disabled: question.isReadOnly,
        group: {
          name: question.name,
          put: function (to, from) {
            return (
              to.options.group && from.options.group && to.options.group.name === from.options.group.name &&
              (question.maxAnswersCount < 0 ||
              to.el.children.length <= question.maxAnswersCount)
            );
          },
        },
        onSort: function (evt) {
          var result = [];
          if (resultEl.children.length === 1) {
            emptyEl.style.display = "";
          } else {
            emptyEl.style.display = "none";
            for (var i = 0; i < resultEl.children.length; i++) {
              if (typeof resultEl.children[i].dataset.value === "undefined")
                continue;
              result.push(resultEl.children[i].dataset.value);
            }
          }
          isUpdatingQuestionValue = true;
          question.value = result;
          isUpdatingQuestionValue = false;
        },
      });
      source = question.sourceEl = Sortable.create(sourceEl, {
        animation: 150,
        disabled: question.isReadOnly,
        group: question.name,
      });
      question.valueChangedCallback = updateValueHandler;
      question.onPropertyChanged.add(function (sender, options) {
        if (options.name == "emptyText") {
          emptyEl.innerHTML = question.emptyText;
        }
      });
      question.readOnlyChangedCallback = function () {
        if (question.isReadOnly) {
          result.options.disabled = true;
          source.options.disabled = true;
        } else {
          result.options.disabled = false;
          source.options.disabled = false;
        }
      };
      question.registerFunctionOnPropertyValueChanged(
        "visibleChoices",
        updateValueHandler
      );
      updateValueHandler();
    },
    willUnmount: function (question, el) {
      question.resultEl.destroy();
      question.sourceEl.destroy();
      question.readOnlyChangedCallback = null;
    },
    pdfQuestionType: "checkbox",
  };

  Survey.CustomWidgetCollection.Instance.addCustomWidget(widget, "customtype");
}

if (typeof Survey !== "undefined") {
  init(Survey);
}

export default init;

================
File: src/surveyjs-widgets.js
================
export { default as icheck } from "./icheck.js";
export { default as select2 } from "./select2.js";
export { default as inputmask } from "./inputmask.js";
export { default as jquerybarrating } from "./jquery-bar-rating.js";
export { default as jqueryuidatepicker } from "./jquery-ui-datepicker.js";
export { default as nouislider } from "./nouislider.js";
export { default as select2tagbox } from "./select2-tagbox.js";
export { default as sortablejs } from "./sortablejs.js";
export { default as ckeditor } from "./ck-editor.js";
export { default as prettycheckbox } from "./pretty-checkbox.js";
export { default as bootstrapslider } from "./bootstrap-slider.js";
export { default as microphone } from "./microphone.js";
export { default as emotionsratings } from "./emotionsratings.js";
export { default as bootstrapdatepicker } from "./bootstrapdatepicker.js";
export { default as autocomplete } from "./easy-autocomplete.js";

================
File: src/targetREADME.md
================
Custom Widgets for the SurveyJS library

##Getting started
[![Join the chat at https://gitter.im/andrewtelnov/surveyjs](https://badges.gitter.im/andrewtelnov/surveyjs.svg)](https://gitter.im/andrewtelnov/surveyjs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

To find our examples go to the [surveyjs.io site](e.g. https://surveyjs.io/Examples/Library/?id=custom-widget-select2)

##License

MIT license - [http://www.opensource.org/licenses/mit-license.php](http://www.opensource.org/licenses/mit-license.php)

##SurveyJS library

SurveyJS library sources are [here](https://github.com/surveyjs/surveyjs)

##Visual Editor

Visual Editor sources are [here](https://github.com/surveyjs/editor)

================
File: testcafe/all-widgets.ts
================
import { Selector, ClientFunction } from "testcafe";
import { url, initSurvey, frameworks } from "./helper";

const title = "All widgets";

const explicitErrorHandler = () => {
    window.addEventListener("error", e => {
        if (e.message === "ResizeObserver loop completed with undelivered notifications." ||
            e.message === "ResizeObserver loop limit exceeded") {
            e.stopImmediatePropagation();
        }
    });
};

var json = {
    questions: [
        {
            type: "dropdown",
            renderAs: "select2",
            choicesByUrl: { url: "https://surveyjs.io/api/CountriesExample" },
            name: "countries",
        },
        {
            name: "date",
            type: "datepicker",
            inputType: "date",
            dateFormat: "mm/dd/yy",
            isRequired: true
        },
        {
            name: "autocomplete",
            type: "text",
            choices: [
                "fontawesome-stars",
                "css-stars",
                "bars-pill",
                "bars-1to10",
                "bars-movie",
                "bars-square",
                "bars-reversed",
                "bars-horizontal",
                "bootstrap-stars",
                "fontawesome-stars-o"
            ]
        }
    ]
};

frameworks.forEach(async framework => {
    fixture`${framework} ${title}`.page`${url}${framework}`.clientScripts({ content: `(${explicitErrorHandler.toString()})()` }).beforeEach(async t => {
    });

    test("Check all widgets are visible", async t => {
        await initSurvey(framework, json);
        const selCountries = Selector('h5').find('span').withExactText('countries');
        const selDate = Selector('h5').find('span').withExactText('date');
        const selAutoComplete = Selector('h5').find('span').withExactText('autocomplete');
        await t
            .expect(selCountries.exists).ok()
            .expect(selCountries.visible).ok()
            .expect(selDate.exists).ok()
            .expect(selDate.visible).ok()
            .expect(selAutoComplete.exists).ok()
            .expect(selAutoComplete.visible).ok()
    });

});

================
File: testcafe/helper.js
================
import { ClientFunction, Selector } from "testcafe";
export const frameworks = ["knockout", "react", "vue"];
export const url = "http://127.0.0.1:8080/examples/";
export const FLOAT_PRECISION = 0.01;

export const initSurvey = ClientFunction(
  (framework, json, events, isDesignMode, props) => {
    console.error = msg => {
      throw new Error(msg);
    };
    console.warn = msg => {
      throw new Error(msg);
    };
    console.log("surveyjs console.error and console.warn override");

    const model = new Survey.Model(json);
    model.setDesignMode(isDesignMode);
    const surveyComplete = function (model) {
      window.SurveyResult = model.data;
      document.getElementById("surveyResultElement").innerHTML = JSON.stringify(
        model.data
      );
    };
    if (!!events) {
      for (var str in events) {
        model[str].add(events[str]);
      }
    }
    if (!!props) {
      for (var key in props) {
        model[key] = props[key];
      }
    }
    model.onComplete.add(surveyComplete);

    if (framework === "knockout") {
      document.getElementById("surveyElement").innerHTML = "";
      model.render("surveyElement");
    } else if (framework === "react") {
      document.getElementById("surveyElement").innerHTML = "";
      ReactDOM.render(
        React.createElement(Survey.Survey, {
          model: model,
          onComplete: surveyComplete,
        }),
        document.getElementById("surveyElement")
      );
    } else if (framework === "vue") {
      document.getElementById("surveyElement").innerHTML =
        "<survey :survey='survey'/>";
      !!window.vueApp && vueApp.$destroy();
      window.vueApp = new Vue({
        el: "#surveyElement",
        data: { survey: model },
      });
    }
    window.survey = model;
  }
);

export const initCreator = ClientFunction((json, creatorOptions) => {
  console.error = (msg) => {
    throw new Error(msg);
  };
  console.warn = (msg) => {
    throw new Error(msg);
  };
  console.log("surveyjs console.error and console.warn override");

  const body = document.querySelector("body");
  body.innerHTML = '<div id="surveyContainer"><div id="creatorElement"></div></div>'

  if (!creatorOptions) creatorOptions = {};
  const creator = new SurveyCreator.SurveyCreator(
    "creatorElement",
    creatorOptions
  );
  creator.saveSurveyFunc = function (saveNo, callback) {
    alert("ok");
    callback(saveNo, true);
  };
  creator.JSON = json;
  creator.showOptions = true;
  creator.showState = true;

  window.creator = creator;
});

export const getData = ClientFunction(() => {
  return survey.data;
});

================
File: testcafe/nouislider.ts
================
import { Selector, ClientFunction } from "testcafe";
import { url, frameworks, initCreator } from "./helper";
const assert = require("assert");

const title = "Tagbox widget";

const explicitErrorHandler = () => {
    window.addEventListener("error", e => {
        if (e.message === "ResizeObserver loop completed with undelivered notifications." ||
            e.message === "ResizeObserver loop limit exceeded") {
            e.stopImmediatePropagation();
        }
    });
};

var json = {
    "pages": [
     {
      "name": "page1",
      "elements": [
       {
        "type": "nouislider",
        "name": "range",
        "title": "Please range",
        "step": 0.5,
        "defaultValue": 3,
        "rangeMin": 1,
        "rangeMax": 5        
       }
      ]
     }
    ]
   };

frameworks.forEach(async framework => {
    fixture`${framework} ${title}`.page`${url}${framework}`.clientScripts({ content: `(${explicitErrorHandler.toString()})()` }).beforeEach(async t => {
    });

    async function checkCurrentSliderState(t: any, minToBe: string, maxToBe: string, startToBe: string) {
        await t
            .expect(Selector(".sv_qstn").exists).ok()
            .expect(Selector(".noUi-value").filterVisible().nth(0).withText(minToBe).exists).ok()
            .expect(Selector(".noUi-value").filterVisible().nth(-1).withText(maxToBe).exists).ok()
            .expect(Selector(".noUi-tooltip").withText(startToBe).exists).ok()
    }

    test("Check noUISlider in creator", async t => {
        if (framework === "knockout") {
            await initCreator(json);
            await t
                .expect(Selector(".sv_qstn").exists).ok()
            await checkCurrentSliderState(t, "1", "5", "3.00");

        }
    });

});

================
File: testcafe/tagbox.ts
================
import { Selector, ClientFunction } from "testcafe";
import { url, initSurvey, frameworks, getData } from "./helper";
const assert = require("assert");

const title = "Tagbox widget";

const explicitErrorHandler = () => {
    window.addEventListener("error", e => {
        if (e.message === "ResizeObserver loop completed with undelivered notifications." ||
            e.message === "ResizeObserver loop limit exceeded") {
            e.stopImmediatePropagation();
        }
    });
};

var json = {
    questions: [
        {
            type: 'tagbox',
            name: 'question1',
            choices: [
                { value: 1, text: 'Item 1' },
                { value: 2, text: 'Item 2' },
                { value: 3, text: 'Item 3' },
                { value: 4, text: 'Item 4' },
                { value: 5, text: 'Item 5' },
            ]
        }
    ]
};

frameworks.forEach(async framework => {
    fixture`${framework} ${title}`.page`${url}${framework}`.clientScripts({ content: `(${explicitErrorHandler.toString()})()` }).beforeEach(async t => {
    });

    test("Check all widgets are visible", async t => {
        await initSurvey(framework, json);
        //await t.debug()
        await t
            .expect(Selector('h5').find('span').withExactText('question1').exists).ok()
            .click(Selector(".select2-container"))
            .typeText(".select2-container", "Item 1")
            .pressKey("enter")
            .typeText(".select2-container", "Item 3")
            .pressKey("enter")
            .click(Selector(".select2-selection__choice__remove").nth(0));
        let data = await getData();
        assert.deepEqual(data["question1"], [3]);
    });
});

================
File: .gitignore
================
.git/*
.vs/*
node_modules/*
doc_generator/**/*.js
doc_generator/**/*.json
tmp/*
.vscode/*
*.cmd
.tsdrc
.idea
/package/**/*
/.gitattributes
project.json
/lib_typings
npm-debug.*
_site
.sass-cache
Gemfile.lock
/typings
/Properties
/web.config
/travis_code.txt
/Startup.cs
/project.lock.json
/hosting.ini

================
File: .prettierrc
================
{
  "trailingComma": "es5",
  "tabWidth": 2,
  "semi": true,
  "singleQuote": false
}

================
File: .travis.yml
================
language: node_js
node_js:
- '8'

before_install:
  - stty cols 80

env:
  global:
    secure: jx34zGaqOAi0fej4CAGaFZmC7mXhugGk368XOuMkRwdGTzFIT1AtyT8hIT5lCAz5lSPogJY364BJ5IKHQsbtiYKfmHE6MB5D8wz3+Lg06pbZmRxuDFQgblJISaSpg1ZFtJatHscOT1ZfUmqEMHFWdrcMvMbmsuFEGxv6Yks2g/wmwIWYtfRfvOrcyCL2XWmYc9gctqv1HbpLJb5xfugTgmKnYOSuwYb5CuRIM2imky8vb4pkmveo7QpA48lAlMn2WrgtO5Zk5Vhn06R7YbC8AzACWe4F1TDr6x0h27f8M3nEYtib6/rovRYkh4lz816GjZEqG8nA1N9a/RCGgRHUG5LBO1KFZ0RbECUfBzGdYiJwcG6FUleTeGqJOo5RjxLhIsuk8OLbJ+8bAhNt4D/gAGmnGH+KQHJld+MCqIraKtdvydaO5U1L2El1S7GUD972GNj4bnisk99oqaqxOzvDT0W9HihhgbAh7vjGqVVOmNlio8voEWDZu4ru9HHxPkQ4DNu8fNRaQqIuIGWeFypHBWG3Bt38RzZpxVmxIDhdUkGu1dJdSPZeHuvheDkSJy62eIjAJnnxFGqTn7cTveUozh5Lky2iTjQuiifk5hFcLNroWcZJNHNgJQd915Q0iVYE3VOxVoPlh01urfeyvCKYiXOsFhgLGTfL8rzqk+JvDvs=
sudo: required
addons:
  firefox: latest
  chrome: stable

services:
  - xvfb

before_script:
- "export DISPLAY=:99.0"
- sleep 3
- npm install -g concurrently@3.1.0

script:
- npm run build

before_deploy: tar -zcvf surveyjs-widgets.tar.gz package

deploy:
- provider: releases
  api_key:
    secure: E3d7Q7uG+cwel2sGfm4vpmVk3s5BY04EC2wkMO/tzMqk8uhAqeESZuYsFauQUf+6MOJxW5bAgy2RYotXMU9JN2zppNi5yS33SyjwWksJ3//nDMXSpYrbImSHFEavqC0Z/zRuYTiDoQMghktZznWORrBorFNVo/MigV7FIcRk5rqSCccWXuC3Me9R6nKP+mUiVXQwP4ZOMLbFxCDa4ibx/hz2z9pUSLa5B+2pgoS3OLkoCP284/fi2nTIIlkQz8m1Hk14abcqVnRYivsIBA6kwBERZN6QZo6YkEKV297H5Xo/v8ZrtYVaW4hnQH1dP25RB7cFpPblsImdmkWTYhTYgj0z4oDfSuM6Ozg9S9CgB60GzZ7KoY79Ou7waZqehLPmaVyA1aLD+wTbTBSLxQPSxRExEL1Ibfw+nxzwpv6QifrEuNPPoQsxr4syVY4lbC/jsI1DJ3IXUhJnkojJmN/YOAFiBxKAD1omeIEcXp9sAAVsE0aqTS5kPmcoFNw9rcfRzyUcvHLg5Ft+NYmAE0OAvt59nz8nRLMH+F2OR89N14hTGJuPU16TKOSWdPRyFhCBCSXCfh5vKdNRwL3LvgjWrD2N8ZR7AyiHvIYfNRd1wZXTydFQN1D4g4DKEHW9ajDIPl2SVkwsEy8HYcf4VdnEVWjm3v6+fWOEF0vLpzH0Vig=
  file:
  - surveyjs-widgets.tar.gz
  skip_cleanup: true
  on:
    tags: true
- provider: script
  script: chmod +x ./deploy_npm.sh && ./deploy_npm.sh
  skip_cleanup: true
  on:
    tags: true

notifications:
  email:
    recipients:
    - andrew.telnov@gmail.com

================
File: CHANGELOG.md
================
# Changelog

All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.

### [1.12.5](https://github.com/surveyjs/custom-widgets/compare/v1.12.4...v1.12.5) (2024-10-08)

### [1.12.4](https://github.com/surveyjs/custom-widgets/compare/v1.12.3...v1.12.4) (2024-10-01)

### [1.12.3](https://github.com/surveyjs/custom-widgets/compare/v1.12.2...v1.12.3) (2024-09-24)

### [1.12.2](https://github.com/surveyjs/custom-widgets/compare/v1.12.1...v1.12.2) (2024-09-17)

### [1.12.1](https://github.com/surveyjs/custom-widgets/compare/v1.11.14...v1.12.1) (2024-09-10)

### [1.11.14](https://github.com/surveyjs/custom-widgets/compare/v1.11.13...v1.11.14) (2024-09-04)

### [1.11.13](https://github.com/surveyjs/custom-widgets/compare/v1.11.12...v1.11.13) (2024-08-27)

### [1.11.12](https://github.com/surveyjs/custom-widgets/compare/v1.11.11...v1.11.12) (2024-08-20)

### [1.11.11](https://github.com/surveyjs/custom-widgets/compare/v1.11.10...v1.11.11) (2024-08-14)

### [1.11.10](https://github.com/surveyjs/custom-widgets/compare/v1.11.9...v1.11.10) (2024-08-06)

### [1.11.9](https://github.com/surveyjs/custom-widgets/compare/v1.11.8...v1.11.9) (2024-07-30)

### [1.11.8](https://github.com/surveyjs/custom-widgets/compare/v1.11.7...v1.11.8) (2024-07-23)

### [1.11.7](https://github.com/surveyjs/custom-widgets/compare/v1.11.6...v1.11.7) (2024-07-16)

### [1.11.6](https://github.com/surveyjs/custom-widgets/compare/v1.11.5...v1.11.6) (2024-07-10)

### [1.11.5](https://github.com/surveyjs/custom-widgets/compare/v1.11.4...v1.11.5) (2024-07-03)

### [1.11.4](https://github.com/surveyjs/custom-widgets/compare/v1.11.3...v1.11.4) (2024-06-25)

### [1.11.3](https://github.com/surveyjs/custom-widgets/compare/v1.11.2...v1.11.3) (2024-06-19)

### [1.11.2](https://github.com/surveyjs/custom-widgets/compare/v1.11.1...v1.11.2) (2024-06-11)

### [1.11.1](https://github.com/surveyjs/custom-widgets/compare/v1.10.6...v1.11.1) (2024-06-06)

### [1.10.6](https://github.com/surveyjs/custom-widgets/compare/v1.10.5...v1.10.6) (2024-05-28)

### [1.10.5](https://github.com/surveyjs/custom-widgets/compare/v1.10.4...v1.10.5) (2024-05-21)

### [1.10.4](https://github.com/surveyjs/custom-widgets/compare/v1.10.3...v1.10.4) (2024-05-15)

### [1.10.3](https://github.com/surveyjs/custom-widgets/compare/v1.10.2...v1.10.3) (2024-05-07)

### [1.10.2](https://github.com/surveyjs/custom-widgets/compare/v1.10.1...v1.10.2) (2024-04-30)

### [1.10.1](https://github.com/surveyjs/custom-widgets/compare/v1.9.139...v1.10.1) (2024-04-25)

### [1.9.139](https://github.com/surveyjs/custom-widgets/compare/v1.9.138...v1.9.139) (2024-04-16)

### [1.9.138](https://github.com/surveyjs/custom-widgets/compare/v1.9.137...v1.9.138) (2024-04-09)

### [1.9.137](https://github.com/surveyjs/custom-widgets/compare/v1.9.136...v1.9.137) (2024-04-03)

### [1.9.136](https://github.com/surveyjs/custom-widgets/compare/v1.9.135...v1.9.136) (2024-03-26)

### [1.9.135](https://github.com/surveyjs/custom-widgets/compare/v1.9.134...v1.9.135) (2024-03-20)

### [1.9.134](https://github.com/surveyjs/custom-widgets/compare/v1.9.133...v1.9.134) (2024-03-13)

### [1.9.133](https://github.com/surveyjs/custom-widgets/compare/v1.9.132...v1.9.133) (2024-03-06)

### [1.9.132](https://github.com/surveyjs/custom-widgets/compare/v1.9.131...v1.9.132) (2024-02-28)

### [1.9.131](https://github.com/surveyjs/custom-widgets/compare/v1.9.130...v1.9.131) (2024-02-20)

### [1.9.130](https://github.com/surveyjs/custom-widgets/compare/v1.9.129...v1.9.130) (2024-02-15)

### [1.9.129](https://github.com/surveyjs/custom-widgets/compare/v1.9.128...v1.9.129) (2024-02-06)

### [1.9.128](https://github.com/surveyjs/custom-widgets/compare/v1.9.127...v1.9.128) (2024-01-31)

### [1.9.127](https://github.com/surveyjs/custom-widgets/compare/v1.9.126...v1.9.127) (2024-01-23)

### [1.9.126](https://github.com/surveyjs/custom-widgets/compare/v1.9.125...v1.9.126) (2024-01-17)

### [1.9.125](https://github.com/surveyjs/custom-widgets/compare/v1.9.124...v1.9.125) (2024-01-11)

### [1.9.124](https://github.com/surveyjs/custom-widgets/compare/v1.9.123...v1.9.124) (2024-01-05)

### [1.9.123](https://github.com/surveyjs/custom-widgets/compare/v1.9.122...v1.9.123) (2023-12-27)

### [1.9.122](https://github.com/surveyjs/custom-widgets/compare/v1.9.121...v1.9.122) (2023-12-20)

### [1.9.121](https://github.com/surveyjs/custom-widgets/compare/v1.9.120...v1.9.121) (2023-12-12)

### [1.9.120](https://github.com/surveyjs/custom-widgets/compare/v1.9.119...v1.9.120) (2023-12-05)

### [1.9.119](https://github.com/surveyjs/custom-widgets/compare/v1.9.118...v1.9.119) (2023-11-28)

### [1.9.118](https://github.com/surveyjs/custom-widgets/compare/v1.9.117...v1.9.118) (2023-11-21)

### [1.9.117](https://github.com/surveyjs/custom-widgets/compare/v1.9.116...v1.9.117) (2023-11-14)

### [1.9.116](https://github.com/surveyjs/custom-widgets/compare/v1.9.115...v1.9.116) (2023-11-07)

### [1.9.115](https://github.com/surveyjs/custom-widgets/compare/v1.9.114...v1.9.115) (2023-11-01)

### [1.9.114](https://github.com/surveyjs/custom-widgets/compare/v1.9.113...v1.9.114) (2023-10-25)

### [1.9.113](https://github.com/surveyjs/custom-widgets/compare/v1.9.112...v1.9.113) (2023-10-17)

### [1.9.112](https://github.com/surveyjs/custom-widgets/compare/v1.9.111...v1.9.112) (2023-10-10)

### [1.9.111](https://github.com/surveyjs/custom-widgets/compare/v1.9.110...v1.9.111) (2023-10-04)

### [1.9.110](https://github.com/surveyjs/custom-widgets/compare/v1.9.109...v1.9.110) (2023-09-26)

### [1.9.109](https://github.com/surveyjs/custom-widgets/compare/v1.9.108...v1.9.109) (2023-09-19)

### [1.9.108](https://github.com/surveyjs/custom-widgets/compare/v1.9.107...v1.9.108) (2023-09-19)

### [1.9.107](https://github.com/surveyjs/custom-widgets/compare/v1.9.106...v1.9.107) (2023-09-11)

### [1.9.106](https://github.com/surveyjs/custom-widgets/compare/v1.9.105...v1.9.106) (2023-09-06)

### [1.9.105](https://github.com/surveyjs/custom-widgets/compare/v1.9.104...v1.9.105) (2023-08-30)

### [1.9.104](https://github.com/surveyjs/custom-widgets/compare/v1.9.103...v1.9.104) (2023-08-22)

### [1.9.103](https://github.com/surveyjs/custom-widgets/compare/v1.9.102...v1.9.103) (2023-08-15)

### [1.9.102](https://github.com/surveyjs/custom-widgets/compare/v1.9.101...v1.9.102) (2023-08-08)

### [1.9.101](https://github.com/surveyjs/custom-widgets/compare/v1.9.100...v1.9.101) (2023-08-02)

### [1.9.100](https://github.com/surveyjs/custom-widgets/compare/v1.9.99...v1.9.100) (2023-07-26)

### [1.9.99](https://github.com/surveyjs/custom-widgets/compare/v1.9.98...v1.9.99) (2023-07-26)

### [1.9.98](https://github.com/surveyjs/custom-widgets/compare/v1.9.97...v1.9.98) (2023-07-18)

### [1.9.97](https://github.com/surveyjs/custom-widgets/compare/v1.9.96...v1.9.97) (2023-07-12)

### [1.9.96](https://github.com/surveyjs/custom-widgets/compare/v1.9.95...v1.9.96) (2023-07-04)

### [1.9.95](https://github.com/surveyjs/custom-widgets/compare/v1.9.94...v1.9.95) (2023-06-28)

### [1.9.94](https://github.com/surveyjs/custom-widgets/compare/v1.9.93...v1.9.94) (2023-06-27)

### [1.9.93](https://github.com/surveyjs/custom-widgets/compare/v1.9.92...v1.9.93) (2023-06-20)

### [1.9.92](https://github.com/surveyjs/custom-widgets/compare/v1.9.91...v1.9.92) (2023-06-14)

### [1.9.91](https://github.com/surveyjs/custom-widgets/compare/v1.9.90...v1.9.91) (2023-06-08)

### [1.9.90](https://github.com/surveyjs/custom-widgets/compare/v1.9.89...v1.9.90) (2023-05-31)

### [1.9.89](https://github.com/surveyjs/custom-widgets/compare/v1.9.88...v1.9.89) (2023-05-23)

### [1.9.88](https://github.com/surveyjs/custom-widgets/compare/v1.9.87...v1.9.88) (2023-05-16)

### [1.9.87](https://github.com/surveyjs/custom-widgets/compare/v1.9.86...v1.9.87) (2023-05-11)

### [1.9.86](https://github.com/surveyjs/custom-widgets/compare/v1.9.85...v1.9.86) (2023-05-03)

### [1.9.85](https://github.com/surveyjs/custom-widgets/compare/v1.9.84...v1.9.85) (2023-04-25)

### [1.9.84](https://github.com/surveyjs/custom-widgets/compare/v1.9.83...v1.9.84) (2023-04-19)

### [1.9.83](https://github.com/surveyjs/custom-widgets/compare/v1.9.82...v1.9.83) (2023-04-12)

### [1.9.82](https://github.com/surveyjs/custom-widgets/compare/v1.9.81...v1.9.82) (2023-04-11)

### [1.9.81](https://github.com/surveyjs/custom-widgets/compare/v1.9.80...v1.9.81) (2023-04-05)

### [1.9.80](https://github.com/surveyjs/custom-widgets/compare/v1.9.79...v1.9.80) (2023-03-29)

### [1.9.79](https://github.com/surveyjs/custom-widgets/compare/v1.9.78...v1.9.79) (2023-03-21)

### [1.9.78](https://github.com/surveyjs/custom-widgets/compare/v1.9.77...v1.9.78) (2023-03-15)

### [1.9.77](https://github.com/surveyjs/custom-widgets/compare/v1.9.76...v1.9.77) (2023-03-07)

### [1.9.76](https://github.com/surveyjs/custom-widgets/compare/v1.9.75...v1.9.76) (2023-02-28)

### [1.9.75](https://github.com/surveyjs/custom-widgets/compare/v1.9.74...v1.9.75) (2023-02-21)

### [1.9.74](https://github.com/surveyjs/custom-widgets/compare/v1.9.71-31-g828ef9f53...v1.9.74) (2023-02-14)

### [1.9.71-31-g828ef9f53](https://github.com/surveyjs/custom-widgets/compare/v1.9.72...v1.9.71-31-g828ef9f53) (2023-02-14)

### [1.9.72](https://github.com/surveyjs/custom-widgets/compare/v1.9.71...v1.9.72) (2023-02-07)

### [1.9.71](https://github.com/surveyjs/custom-widgets/compare/v1.9.70...v1.9.71) (2023-01-31)

### [1.9.70](https://github.com/surveyjs/custom-widgets/compare/v1.9.69...v1.9.70) (2023-01-24)

### [1.9.69](https://github.com/surveyjs/custom-widgets/compare/v1.9.68...v1.9.69) (2023-01-17)

### [1.9.68](https://github.com/surveyjs/custom-widgets/compare/v1.9.67...v1.9.68) (2023-01-11)

### [1.9.67](https://github.com/surveyjs/custom-widgets/compare/v1.9.66...v1.9.67) (2023-01-05)

### [1.9.66](https://github.com/surveyjs/custom-widgets/compare/v1.9.65...v1.9.66) (2022-12-30)

### [1.9.65](https://github.com/surveyjs/custom-widgets/compare/v1.9.64...v1.9.65) (2022-12-20)

### [1.9.64](https://github.com/surveyjs/custom-widgets/compare/v1.9.63...v1.9.64) (2022-12-13)

### [1.9.63](https://github.com/surveyjs/custom-widgets/compare/v1.9.62...v1.9.63) (2022-12-08)

### [1.9.62](https://github.com/surveyjs/custom-widgets/compare/v1.9.61...v1.9.62) (2022-12-06)

### [1.9.61](https://github.com/surveyjs/custom-widgets/compare/v1.9.60...v1.9.61) (2022-11-30)

### [1.9.60](https://github.com/surveyjs/custom-widgets/compare/v1.9.59...v1.9.60) (2022-11-24)

### [1.9.59](https://github.com/surveyjs/custom-widgets/compare/v1.9.58...v1.9.59) (2022-11-22)

### [1.9.58](https://github.com/surveyjs/custom-widgets/compare/v1.9.57...v1.9.58) (2022-11-16)

### [1.9.57](https://github.com/surveyjs/custom-widgets/compare/v1.9.56...v1.9.57) (2022-11-08)

### [1.9.56](https://github.com/surveyjs/custom-widgets/compare/v1.9.55...v1.9.56) (2022-11-01)

### [1.9.55](https://github.com/surveyjs/custom-widgets/compare/v1.9.54...v1.9.55) (2022-10-25)

### [1.9.54](https://github.com/surveyjs/custom-widgets/compare/v1.9.53...v1.9.54) (2022-10-18)

### [1.9.53](https://github.com/surveyjs/custom-widgets/compare/v1.9.52...v1.9.53) (2022-10-11)

### [1.9.52](https://github.com/surveyjs/custom-widgets/compare/v1.9.51...v1.9.52) (2022-10-04)

### [1.9.51](https://github.com/surveyjs/custom-widgets/compare/v1.9.50...v1.9.51) (2022-09-29)

### [1.9.50](https://github.com/surveyjs/custom-widgets/compare/v1.9.49...v1.9.50) (2022-09-20)

### [1.9.49](https://github.com/surveyjs/custom-widgets/compare/v1.9.48...v1.9.49) (2022-09-15)

### [1.9.48](https://github.com/surveyjs/custom-widgets/compare/v1.9.47...v1.9.48) (2022-09-07)

### [1.9.47](https://github.com/surveyjs/custom-widgets/compare/v1.9.46...v1.9.47) (2022-08-31)

### [1.9.46](https://github.com/surveyjs/custom-widgets/compare/v1.9.45...v1.9.46) (2022-08-23)

### [1.9.45](https://github.com/surveyjs/custom-widgets/compare/v1.9.44...v1.9.45) (2022-08-16)

### [1.9.44](https://github.com/surveyjs/custom-widgets/compare/v1.9.43...v1.9.44) (2022-08-09)

### [1.9.43](https://github.com/surveyjs/custom-widgets/compare/v1.9.42...v1.9.43) (2022-08-03)

### [1.9.42](https://github.com/surveyjs/custom-widgets/compare/v1.9.41...v1.9.42) (2022-07-27)

### [1.9.41](https://github.com/surveyjs/custom-widgets/compare/v1.9.40...v1.9.41) (2022-07-20)

### [1.9.40](https://github.com/surveyjs/custom-widgets/compare/v1.9.39...v1.9.40) (2022-07-12)

### [1.9.39](https://github.com/surveyjs/custom-widgets/compare/v1.9.38...v1.9.39) (2022-07-05)

### [1.9.38](https://github.com/surveyjs/custom-widgets/compare/v1.9.37...v1.9.38) (2022-06-29)

### [1.9.37](https://github.com/surveyjs/custom-widgets/compare/v1.9.36...v1.9.37) (2022-06-22)

### [1.9.36](https://github.com/surveyjs/custom-widgets/compare/v1.9.35...v1.9.36) (2022-06-21)

### [1.9.35](https://github.com/surveyjs/custom-widgets/compare/v1.9.34...v1.9.35) (2022-06-14)

### [1.9.34](https://github.com/surveyjs/custom-widgets/compare/v1.9.33...v1.9.34) (2022-06-07)

### [1.9.33](https://github.com/surveyjs/custom-widgets/compare/v1.9.32...v1.9.33) (2022-05-31)

### [1.9.32](https://github.com/surveyjs/custom-widgets/compare/v1.9.31...v1.9.32) (2022-05-24)

### [1.9.31](https://github.com/surveyjs/custom-widgets/compare/v1.9.30...v1.9.31) (2022-05-18)

### [1.9.30](https://github.com/surveyjs/custom-widgets/compare/v1.9.29...v1.9.30) (2022-05-17)

### [1.9.29](https://github.com/surveyjs/custom-widgets/compare/v1.9.28...v1.9.29) (2022-05-11)

### [1.9.28](https://github.com/surveyjs/custom-widgets/compare/v1.9.27...v1.9.28) (2022-05-04)

### [1.9.27](https://github.com/surveyjs/custom-widgets/compare/v1.9.26...v1.9.27) (2022-04-27)

### [1.9.26](https://github.com/surveyjs/custom-widgets/compare/v1.9.25...v1.9.26) (2022-04-19)

### [1.9.25](https://github.com/surveyjs/custom-widgets/compare/v1.9.24...v1.9.25) (2022-04-14)

### [1.9.24](https://github.com/surveyjs/custom-widgets/compare/v1.9.23...v1.9.24) (2022-04-12)

### [1.9.23](https://github.com/surveyjs/custom-widgets/compare/v1.9.22...v1.9.23) (2022-04-05)

### [1.9.22](https://github.com/surveyjs/custom-widgets/compare/v1.9.21...v1.9.22) (2022-03-29)

### [1.9.21](https://github.com/surveyjs/custom-widgets/compare/v1.9.20...v1.9.21) (2022-03-24)

### [1.9.20](https://github.com/surveyjs/custom-widgets/compare/v1.9.19...v1.9.20) (2022-03-17)

### [1.9.19](https://github.com/surveyjs/custom-widgets/compare/v1.9.18...v1.9.19) (2022-03-09)

### [1.9.18](https://github.com/surveyjs/custom-widgets/compare/v1.9.17...v1.9.18) (2022-02-24)

### [1.9.17](https://github.com/surveyjs/custom-widgets/compare/v1.9.16...v1.9.17) (2022-02-24)

### [1.9.16](https://github.com/surveyjs/custom-widgets/compare/v1.9.15...v1.9.16) (2022-02-23)

### [1.9.15](https://github.com/surveyjs/custom-widgets/compare/v1.9.14...v1.9.15) (2022-02-22)

### [1.9.14](https://github.com/surveyjs/custom-widgets/compare/v1.9.13...v1.9.14) (2022-02-17)

### [1.9.13](https://github.com/surveyjs/custom-widgets/compare/v1.9.12...v1.9.13) (2022-02-14)

### [1.9.12](https://github.com/surveyjs/custom-widgets/compare/v1.9.11...v1.9.12) (2022-02-10)

### [1.9.11](https://github.com/surveyjs/custom-widgets/compare/v1.9.10...v1.9.11) (2022-02-09)

### [1.9.10](https://github.com/surveyjs/custom-widgets/compare/v1.9.9...v1.9.10) (2022-02-09)

### [1.9.9](https://github.com/surveyjs/custom-widgets/compare/v1.9.8...v1.9.9) (2022-02-09)

### [1.9.8](https://github.com/surveyjs/custom-widgets/compare/v1.9.7...v1.9.8) (2022-02-01)

### [1.9.7](https://github.com/surveyjs/custom-widgets/compare/v1.9.6...v1.9.7) (2022-01-25)

### [1.9.6](https://github.com/surveyjs/custom-widgets/compare/v1.9.5...v1.9.6) (2022-01-18)

### [1.9.5](https://github.com/surveyjs/custom-widgets/compare/v1.9.4...v1.9.5) (2022-01-11)

### [1.9.4](https://github.com/surveyjs/custom-widgets/compare/v1.9.3...v1.9.4) (2021-12-30)

### [1.9.3](https://github.com/surveyjs/custom-widgets/compare/v1.9.2...v1.9.3) (2021-12-21)

### [1.9.2](https://github.com/surveyjs/custom-widgets/compare/v1.9.1...v1.9.2) (2021-12-15)

### [1.9.1](https://github.com/surveyjs/custom-widgets/compare/v1.9.0...v1.9.1) (2021-12-08)

## [1.9.0](https://github.com/surveyjs/custom-widgets/compare/v1.8.79...v1.9.0) (2021-12-01)

### [1.8.79](https://github.com/surveyjs/custom-widgets/compare/v1.8.78...v1.8.79) (2021-11-25)

### [1.8.78](https://github.com/surveyjs/custom-widgets/compare/v1.8.77...v1.8.78) (2021-11-17)

### [1.8.77](https://github.com/surveyjs/custom-widgets/compare/v1.8.76...v1.8.77) (2021-11-09)

### [1.8.76](https://github.com/surveyjs/custom-widgets/compare/v1.8.75...v1.8.76) (2021-11-02)

### [1.8.75](https://github.com/surveyjs/custom-widgets/compare/v1.8.74...v1.8.75) (2021-10-27)

### [1.8.74](https://github.com/surveyjs/custom-widgets/compare/v1.8.73...v1.8.74) (2021-10-26)

### [1.8.73](https://github.com/surveyjs/custom-widgets/compare/v1.8.72...v1.8.73) (2021-10-21)

### [1.8.72](https://github.com/surveyjs/custom-widgets/compare/v1.8.71...v1.8.72) (2021-10-12)

### [1.8.71](https://github.com/surveyjs/custom-widgets/compare/v1.8.70...v1.8.71) (2021-10-07)

### [1.8.70](https://github.com/surveyjs/custom-widgets/compare/v1.8.69...v1.8.70) (2021-09-29)

### [1.8.69](https://github.com/surveyjs/custom-widgets/compare/v1.8.68...v1.8.69) (2021-09-28)


### Bug Fixes

* tagbox doesn't remove items if value is number [#273](https://github.com/surveyjs/custom-widgets/issues/273) ([6e1c17a](https://github.com/surveyjs/custom-widgets/commit/6e1c17a742b655b7918aa347d63840184b43a9d1))

### [1.8.68](https://github.com/surveyjs/custom-widgets/compare/v1.8.67...v1.8.68) (2021-09-21)

### [1.8.67](https://github.com/surveyjs/custom-widgets/compare/v1.8.66...v1.8.67) (2021-09-17)

### [1.8.66](https://github.com/surveyjs/custom-widgets/compare/v1.8.65...v1.8.66) (2021-09-15)


### Bug Fixes

* subscribe on jquery datepicker manual input change ([462160e](https://github.com/surveyjs/custom-widgets/commit/462160ef2a68675434801fe63c4e62bafde289ef))

### [1.8.65](https://github.com/surveyjs/custom-widgets/compare/v1.8.64...v1.8.65) (2021-09-07)

### [1.8.64](https://github.com/surveyjs/custom-widgets/compare/v1.8.63...v1.8.64) (2021-08-31)

### [1.8.63](https://github.com/surveyjs/custom-widgets/compare/v1.8.62...v1.8.63) (2021-08-25)

### [1.8.62](https://github.com/surveyjs/custom-widgets/compare/v1.8.61...v1.8.62) (2021-08-25)

### [1.8.61](https://github.com/surveyjs/custom-widgets/compare/v1.8.60...v1.8.61) (2021-08-19)

### [1.8.60](https://github.com/surveyjs/custom-widgets/compare/v1.8.59...v1.8.60) (2021-08-11)

### [1.8.59](https://github.com/surveyjs/custom-widgets/compare/v1.8.58...v1.8.59) (2021-08-03)


### Bug Fixes

* EasyAutocomplete doesn't work with goNextPageAutomatic: true [#266](https://github.com/surveyjs/custom-widgets/issues/266) ([d56dfe0](https://github.com/surveyjs/custom-widgets/commit/d56dfe06224b8db959dc1b461626988e9bd61fd4))

### [1.8.58](https://github.com/surveyjs/custom-widgets/compare/v1.8.57...v1.8.58) (2021-07-28)


### Bug Fixes

* Select2 "other" option with storeOthersAsComment set to false issue (React) [#265](https://github.com/surveyjs/custom-widgets/issues/265) ([b24c652](https://github.com/surveyjs/custom-widgets/commit/b24c65259a5a4112ec333728efe046ece73530df))

### [1.8.57](https://github.com/surveyjs/custom-widgets/compare/v1.8.56...v1.8.57) (2021-07-20)

### [1.8.56](https://github.com/surveyjs/custom-widgets/compare/v1.8.55...v1.8.56) (2021-07-13)

### [1.8.55](https://github.com/surveyjs/custom-widgets/compare/v1.8.54...v1.8.55) (2021-07-07)

### [1.8.54](https://github.com/surveyjs/custom-widgets/compare/v1.8.53...v1.8.54) (2021-06-30)

### [1.8.53](https://github.com/surveyjs/custom-widgets/compare/v1.8.52...v1.8.53) (2021-06-23)

### [1.8.52](https://github.com/surveyjs/custom-widgets/compare/v1.8.51...v1.8.52) (2021-06-16)

### [1.8.51](https://github.com/surveyjs/custom-widgets/compare/v1.8.50...v1.8.51) (2021-06-09)

### [1.8.50](https://github.com/surveyjs/custom-widgets/compare/v1.8.49...v1.8.50) (2021-06-04)

### [1.8.49](https://github.com/surveyjs/custom-widgets/compare/v1.8.48...v1.8.49) (2021-05-26)

### [1.8.48](https://github.com/surveyjs/custom-widgets/compare/v1.8.47...v1.8.48) (2021-05-19)

### [1.8.47](https://github.com/surveyjs/custom-widgets/compare/v1.8.46...v1.8.47) (2021-05-11)

### [1.8.46](https://github.com/surveyjs/custom-widgets/compare/v1.8.45...v1.8.46) (2021-04-30)

### [1.8.45](https://github.com/surveyjs/custom-widgets/compare/v1.8.44...v1.8.45) (2021-04-28)


### Bug Fixes

* Ck-Editor plugin doesn't work in panel dynamic [#251](https://github.com/surveyjs/custom-widgets/issues/251) ([2f41e8a](https://github.com/surveyjs/custom-widgets/commit/2f41e8a603f73666e1bb853ef9cfcaee070cdf12))
* jquery date picker generates error if jQuery is not included [#250](https://github.com/surveyjs/custom-widgets/issues/250) ([66598e2](https://github.com/surveyjs/custom-widgets/commit/66598e21c335be39fb620130910a185bddd3af36))

### [1.8.44](https://github.com/surveyjs/custom-widgets/compare/v1.8.43...v1.8.44) (2021-04-20)

### [1.8.43](https://github.com/surveyjs/custom-widgets/compare/v1.8.42...v1.8.43) (2021-04-14)

### [1.8.42](https://github.com/surveyjs/custom-widgets/compare/v1.8.41...v1.8.42) (2021-04-13)

### [1.8.41](https://github.com/surveyjs/custom-widgets/compare/v1.8.40...v1.8.41) (2021-04-06)

### [1.8.40](https://github.com/surveyjs/custom-widgets/compare/v1.8.39...v1.8.40) (2021-04-05)

### [1.8.39](https://github.com/surveyjs/custom-widgets/compare/v1.8.38...v1.8.39) (2021-03-31)

### [1.8.38](https://github.com/surveyjs/custom-widgets/compare/v1.8.37...v1.8.38) (2021-03-29)

### [1.8.37](https://github.com/surveyjs/custom-widgets/compare/v1.8.36...v1.8.37) (2021-03-23)

### [1.8.36](https://github.com/surveyjs/custom-widgets/compare/v1.8.35...v1.8.36) (2021-03-15)

### [1.8.35](https://github.com/surveyjs/custom-widgets/compare/v1.8.34...v1.8.35) (2021-03-11)

### [1.8.34](https://github.com/surveyjs/custom-widgets/compare/v1.8.33...v1.8.34) (2021-03-05)

### [1.8.33](https://github.com/surveyjs/custom-widgets/compare/v1.8.32...v1.8.33) (2021-03-02)

### [1.8.32](https://github.com/surveyjs/custom-widgets/compare/v1.8.31...v1.8.32) (2021-02-24)

### [1.8.31](https://github.com/surveyjs/custom-widgets/compare/v1.8.30...v1.8.31) (2021-02-16)

### [1.8.30](https://github.com/surveyjs/custom-widgets/compare/v1.8.29...v1.8.30) (2021-02-11)

### [1.8.29](https://github.com/surveyjs/custom-widgets/compare/v1.8.28...v1.8.29) (2021-02-03)

### [1.8.28](https://github.com/surveyjs/custom-widgets/compare/v1.8.27...v1.8.28) (2021-01-28)

### [1.8.27](https://github.com/surveyjs/custom-widgets/compare/v1.8.26...v1.8.27) (2021-01-28)

### [1.8.26](https://github.com/surveyjs/custom-widgets/compare/v1.8.25...v1.8.26) (2021-01-19)

### [1.8.25](https://github.com/surveyjs/custom-widgets/compare/v1.8.24...v1.8.25) (2021-01-14)

### [1.8.24](https://github.com/surveyjs/custom-widgets/compare/v1.8.23...v1.8.24) (2021-01-13)

### [1.8.23](https://github.com/surveyjs/custom-widgets/compare/v1.8.22...v1.8.23) (2020-12-29)

### [1.8.22](https://github.com/surveyjs/custom-widgets/compare/v1.8.21...v1.8.22) (2020-12-23)

### [1.8.21](https://github.com/surveyjs/custom-widgets/compare/v1.8.20...v1.8.21) (2020-12-15)

### [1.8.20](https://github.com/surveyjs/custom-widgets/compare/v1.8.19...v1.8.20) (2020-12-09)

### [1.8.19](https://github.com/surveyjs/custom-widgets/compare/v1.8.18...v1.8.19) (2020-12-08)

### [1.8.18](https://github.com/surveyjs/custom-widgets/compare/v1.8.17...v1.8.18) (2020-12-01)

### [1.8.17](https://github.com/surveyjs/custom-widgets/compare/v1.8.16...v1.8.17) (2020-11-26)

### [1.8.16](https://github.com/surveyjs/custom-widgets/compare/v1.8.14...v1.8.16) (2020-11-24)

### [1.8.14](https://github.com/surveyjs/custom-widgets/compare/v1.8.13...v1.8.14) (2020-11-19)

### [1.8.13](https://github.com/surveyjs/custom-widgets/compare/v1.8.12...v1.8.13) (2020-11-09)

### [1.8.12](https://github.com/surveyjs/custom-widgets/compare/v1.8.11...v1.8.12) (2020-10-28)

### [1.8.11](https://github.com/surveyjs/custom-widgets/compare/v1.8.10...v1.8.11) (2020-10-23)

### [1.8.10](https://github.com/surveyjs/custom-widgets/compare/v1.8.9...v1.8.10) (2020-10-21)

### [1.8.9](https://github.com/surveyjs/custom-widgets/compare/v1.8.8...v1.8.9) (2020-10-14)

### [1.8.8](https://github.com/surveyjs/custom-widgets/compare/v1.8.7...v1.8.8) (2020-10-09)

### [1.8.7](https://github.com/surveyjs/custom-widgets/compare/v1.8.6...v1.8.7) (2020-10-06)

### [1.8.6](https://github.com/surveyjs/custom-widgets/compare/v1.8.4...v1.8.6) (2020-09-29)

### [1.8.4](https://github.com/surveyjs/widgets/compare/v1.8.3...v1.8.4) (2020-09-22)

### [1.8.3](https://github.com/surveyjs/widgets/compare/v1.8.2...v1.8.3) (2020-09-16)

### [1.8.2](https://github.com/surveyjs/widgets/compare/v1.8.1...v1.8.2) (2020-09-10)

### [1.8.1](https://github.com/surveyjs/widgets/compare/v1.8.0...v1.8.1) (2020-09-09)

## [1.8.0](https://github.com/surveyjs/widgets/compare/v1.7.28...v1.8.0) (2020-09-02)

### [1.7.28](https://github.com/surveyjs/widgets/compare/v1.7.27...v1.7.28) (2020-08-25)

### [1.7.27](https://github.com/surveyjs/widgets/compare/v1.7.26...v1.7.27) (2020-08-19)

### [1.7.26](https://github.com/surveyjs/widgets/compare/v1.7.25...v1.7.26) (2020-08-11)

### [1.7.25](https://github.com/surveyjs/widgets/compare/v1.7.24...v1.7.25) (2020-08-04)

### [1.7.24](https://github.com/surveyjs/widgets/compare/v1.7.23...v1.7.24) (2020-07-28)

### [1.7.23](https://github.com/surveyjs/widgets/compare/v1.7.22...v1.7.23) (2020-07-22)

### [1.7.22](https://github.com/surveyjs/widgets/compare/v1.7.21...v1.7.22) (2020-07-22)

### [1.7.21](https://github.com/surveyjs/widgets/compare/v1.7.20...v1.7.21) (2020-07-22)


### Bug Fixes

* sortable list text changing not working on typing or on blur [#204](https://github.com/surveyjs/widgets/issues/204) ([d5ca377](https://github.com/surveyjs/widgets/commit/d5ca377fb546fe8ce5f556ebfad8d22b1746476b))

### [1.7.20](https://github.com/surveyjs/widgets/compare/v1.7.19...v1.7.20) (2020-07-15)

### [1.7.19](https://github.com/surveyjs/widgets/compare/v1.7.18...v1.7.19) (2020-07-09)

### [1.7.18](https://github.com/surveyjs/widgets/compare/v1.7.17...v1.7.18) (2020-07-04)

### [1.7.17](https://github.com/surveyjs/widgets/compare/v1.7.16...v1.7.17) (2020-07-01)

### [1.7.16](https://github.com/surveyjs/widgets/compare/v1.7.15...v1.7.16) (2020-06-30)

### [1.7.15](https://github.com/surveyjs/widgets/compare/v1.7.14...v1.7.15) (2020-06-25)

### [1.7.14](https://github.com/surveyjs/widgets/compare/v1.7.13...v1.7.14) (2020-06-25)

### [1.7.13](https://github.com/surveyjs/widgets/compare/v1.7.12...v1.7.13) (2020-06-24)

### [1.7.12](https://github.com/surveyjs/widgets/compare/v1.7.11...v1.7.12) (2020-06-16)

### [1.7.11](https://github.com/surveyjs/widgets/compare/v1.7.10...v1.7.11) (2020-06-10)


### Bug Fixes

* **nouislider:** explicit cast to number ([#195](https://github.com/surveyjs/widgets/issues/195)) ([51e9209](https://github.com/surveyjs/widgets/commit/51e920977a5c191dcca45ab91d29782675b0f022))

### [1.7.10](https://github.com/surveyjs/widgets/compare/v1.7.9...v1.7.10) (2020-06-03)

### [1.7.9](https://github.com/surveyjs/widgets/compare/v1.7.8...v1.7.9) (2020-05-27)

### [1.7.8](https://github.com/surveyjs/widgets/compare/v1.7.7...v1.7.8) (2020-05-26)

### [1.7.7](https://github.com/surveyjs/widgets/compare/v1.7.6...v1.7.7) (2020-05-19)

### [1.7.6](https://github.com/surveyjs/widgets/compare/v1.7.5...v1.7.6) (2020-05-12)

### [1.7.5](https://github.com/surveyjs/widgets/compare/v1.7.4...v1.7.5) (2020-05-07)

### [1.7.4](https://github.com/surveyjs/widgets/compare/v1.7.3...v1.7.4) (2020-04-29)

### [1.7.3](https://github.com/surveyjs/widgets/compare/v1.7.2...v1.7.3) (2020-04-21)


### Bug Fixes

* inputMask doesn't work for Multiple Text question [#171](https://github.com/surveyjs/widgets/issues/171) ([445bd15](https://github.com/surveyjs/widgets/commit/445bd1576575863739422419e444e23e55f0237f))

### [1.7.2](https://github.com/surveyjs/widgets/compare/v1.7.1...v1.7.2) (2020-04-17)


### Bug Fixes

* InputMask widget doesn't support inputFormat property [#170](https://github.com/surveyjs/widgets/issues/170) ([97b4b0d](https://github.com/surveyjs/widgets/commit/97b4b0d908a321acf70c145769739b332b406e13))

### [1.7.1](https://github.com/surveyjs/widgets/compare/v1.5.19...v1.7.1) (2020-04-15)

### [1.5.19](https://github.com/surveyjs/widgets/compare/v1.5.18...v1.5.19) (2020-04-07)

### [1.5.18](https://github.com/surveyjs/widgets/compare/v1.5.17...v1.5.18) (2020-03-31)

### [1.5.17](https://github.com/surveyjs/widgets/compare/v1.5.16...v1.5.17) (2020-03-25)

### [1.5.16](https://github.com/surveyjs/widgets/compare/v1.5.15...v1.5.16) (2020-03-18)

### [1.5.15](https://github.com/surveyjs/widgets/compare/v1.5.13...v1.5.15) (2020-03-12)

### [1.5.13](https://github.com/surveyjs/widgets/compare/v1.5.12...v1.5.13) (2020-03-04)

### [1.5.12](https://github.com/surveyjs/widgets/compare/v1.5.11...v1.5.12) (2020-02-28)

### [1.5.11](https://github.com/surveyjs/widgets/compare/v1.5.10...v1.5.11) (2020-02-28)

<a name="1.5.10"></a>
## [1.5.10](https://github.com/surveyjs/widgets/compare/v1.5.9...v1.5.10) (2020-02-18)



<a name="1.5.9"></a>
## [1.5.9](https://github.com/surveyjs/widgets/compare/v1.5.8...v1.5.9) (2020-02-14)



<a name="1.5.8"></a>
## [1.5.8](https://github.com/surveyjs/widgets/compare/v1.5.7...v1.5.8) (2020-02-12)



<a name="1.5.7"></a>
## [1.5.7](https://github.com/surveyjs/widgets/compare/v1.5.6...v1.5.7) (2020-02-11)



<a name="1.5.6"></a>
## [1.5.6](https://github.com/surveyjs/widgets/compare/v1.5.5...v1.5.6) (2020-02-07)



<a name="1.5.5"></a>
## [1.5.5](https://github.com/surveyjs/widgets/compare/v1.5.4...v1.5.5) (2020-02-03)



<a name="1.5.4"></a>
## [1.5.4](https://github.com/surveyjs/widgets/compare/v1.5.3...v1.5.4) (2020-01-31)



<a name="1.5.1"></a>
## [1.5.1](https://github.com/surveyjs/widgets/compare/v1.5.0...v1.5.1) (2020-01-24)



<a name="1.1.32"></a>
## [1.1.32](https://github.com/surveyjs/widgets/compare/v1.1.31...v1.1.32) (2020-01-14)



<a name="1.1.31"></a>
## [1.1.31](https://github.com/surveyjs/widgets/compare/v1.1.30...v1.1.31) (2020-01-09)



<a name="1.1.30"></a>
## [1.1.30](https://github.com/surveyjs/widgets/compare/v1.1.29...v1.1.30) (2020-01-09)



<a name="1.1.29"></a>
## [1.1.29](https://github.com/surveyjs/widgets/compare/v1.1.28...v1.1.29) (2019-12-30)



<a name="1.1.28"></a>
## [1.1.28](https://github.com/surveyjs/widgets/compare/v1.1.27...v1.1.28) (2019-12-30)



<a name="1.1.27"></a>
## [1.1.27](https://github.com/surveyjs/widgets/compare/v1.1.26...v1.1.27) (2019-12-30)



<a name="1.1.26"></a>
## [1.1.26](https://github.com/surveyjs/widgets/compare/v1.1.25...v1.1.26) (2019-12-24)



<a name="1.1.25"></a>
## [1.1.25](https://github.com/surveyjs/widgets/compare/v1.1.24...v1.1.25) (2019-12-17)



<a name="1.1.24"></a>
## [1.1.24](https://github.com/surveyjs/widgets/compare/v1.1.23...v1.1.24) (2019-12-10)



<a name="1.1.23"></a>
## [1.1.23](https://github.com/surveyjs/widgets/compare/v1.1.22...v1.1.23) (2019-12-03)



<a name="1.1.22"></a>
## [1.1.22](https://github.com/surveyjs/widgets/compare/v1.1.21...v1.1.22) (2019-11-26)



<a name="1.1.21"></a>
## [1.1.21](https://github.com/surveyjs/widgets/compare/v1.1.20...v1.1.21) (2019-11-19)



<a name="1.1.20"></a>
## [1.1.20](https://github.com/surveyjs/widgets/compare/v1.1.19...v1.1.20) (2019-11-12)



<a name="1.1.19"></a>
## [1.1.19](https://github.com/surveyjs/widgets/compare/v1.1.18...v1.1.19) (2019-11-06)



<a name="1.1.18"></a>
## [1.1.18](https://github.com/surveyjs/widgets/compare/v1.1.17...v1.1.18) (2019-10-30)



<a name="1.1.17"></a>
## [1.1.17](https://github.com/surveyjs/widgets/compare/v1.1.16...v1.1.17) (2019-10-22)



<a name="1.1.16"></a>
## [1.1.16](https://github.com/surveyjs/widgets/compare/v1.1.15...v1.1.16) (2019-10-16)



<a name="1.1.15"></a>
## [1.1.15](https://github.com/surveyjs/widgets/compare/v1.1.14...v1.1.15) (2019-10-08)



<a name="1.1.14"></a>
## [1.1.14](https://github.com/surveyjs/widgets/compare/v1.1.13...v1.1.14) (2019-10-01)



<a name="1.1.13"></a>
## [1.1.13](https://github.com/surveyjs/widgets/compare/v1.1.12...v1.1.13) (2019-09-24)



<a name="1.1.12"></a>
## [1.1.12](https://github.com/surveyjs/widgets/compare/v1.1.11...v1.1.12) (2019-09-17)



<a name="1.1.11"></a>
## [1.1.11](https://github.com/surveyjs/widgets/compare/v1.1.10...v1.1.11) (2019-09-13)



<a name="1.1.10"></a>
## [1.1.10](https://github.com/surveyjs/widgets/compare/v1.1.9...v1.1.10) (2019-09-11)



<a name="1.1.9"></a>
## [1.1.9](https://github.com/surveyjs/widgets/compare/v1.1.8...v1.1.9) (2019-09-10)



<a name="1.1.8"></a>
## [1.1.8](https://github.com/surveyjs/widgets/compare/v1.1.7...v1.1.8) (2019-09-03)



<a name="1.1.7"></a>
## [1.1.7](https://github.com/surveyjs/widgets/compare/v1.1.6...v1.1.7) (2019-08-27)



<a name="1.1.6"></a>
## [1.1.6](https://github.com/surveyjs/widgets/compare/v1.1.5...v1.1.6) (2019-08-20)



<a name="1.1.5"></a>
## [1.1.5](https://github.com/surveyjs/widgets/compare/v1.1.4...v1.1.5) (2019-08-13)



<a name="1.1.4"></a>
## [1.1.4](https://github.com/surveyjs/widgets/compare/v1.1.3...v1.1.4) (2019-08-12)



<a name="1.1.3"></a>
## [1.1.3](https://github.com/surveyjs/widgets/compare/v1.1.2...v1.1.3) (2019-08-06)



<a name="1.1.2"></a>
## [1.1.2](https://github.com/surveyjs/widgets/compare/v1.1.1...v1.1.2) (2019-07-30)



<a name="1.1.1"></a>
## [1.1.1](https://github.com/surveyjs/widgets/compare/v1.1.0...v1.1.1) (2019-07-23)



<a name="1.1.0"></a>
# [1.1.0](https://github.com/surveyjs/widgets/compare/v1.0.99...v1.1.0) (2019-07-17)



<a name="1.0.99"></a>
## [1.0.99](https://github.com/surveyjs/widgets/compare/v1.0.98...v1.0.99) (2019-07-16)



<a name="1.0.98"></a>
## [1.0.98](https://github.com/surveyjs/widgets/compare/v1.0.97...v1.0.98) (2019-07-09)



<a name="1.0.97"></a>
## [1.0.97](https://github.com/surveyjs/widgets/compare/v1.0.96...v1.0.97) (2019-07-09)



<a name="1.0.96"></a>
## [1.0.96](https://github.com/surveyjs/widgets/compare/v1.0.95...v1.0.96) (2019-07-02)



<a name="1.0.95"></a>
## [1.0.95](https://github.com/surveyjs/widgets/compare/v1.0.94...v1.0.95) (2019-06-25)



<a name="1.0.94"></a>
## [1.0.94](https://github.com/surveyjs/widgets/compare/v1.0.93...v1.0.94) (2019-06-22)



<a name="1.0.93"></a>
## [1.0.93](https://github.com/surveyjs/widgets/compare/v1.0.92...v1.0.93) (2019-06-20)



<a name="1.0.92"></a>
## [1.0.92](https://github.com/surveyjs/widgets/compare/v1.0.91...v1.0.92) (2019-06-11)



<a name="1.0.91"></a>
## [1.0.91](https://github.com/surveyjs/widgets/compare/v1.0.90...v1.0.91) (2019-06-05)



<a name="1.0.90"></a>
## [1.0.90](https://github.com/surveyjs/widgets/compare/v1.0.89...v1.0.90) (2019-06-04)



<a name="1.0.89"></a>
## [1.0.89](https://github.com/surveyjs/widgets/compare/v1.0.88...v1.0.89) (2019-05-30)



<a name="1.0.88"></a>
## [1.0.88](https://github.com/surveyjs/widgets/compare/v1.0.87...v1.0.88) (2019-05-28)



<a name="1.0.87"></a>
## [1.0.87](https://github.com/surveyjs/widgets/compare/v1.0.86...v1.0.87) (2019-05-23)



<a name="1.0.86"></a>
## [1.0.86](https://github.com/surveyjs/widgets/compare/v1.0.85...v1.0.86) (2019-05-22)



<a name="1.0.85"></a>
## [1.0.85](https://github.com/surveyjs/widgets/compare/v1.0.84...v1.0.85) (2019-05-14)



<a name="1.0.84"></a>
## [1.0.84](https://github.com/surveyjs/widgets/compare/v1.0.83...v1.0.84) (2019-05-07)



<a name="1.0.83"></a>
## [1.0.83](https://github.com/surveyjs/widgets/compare/v1.0.82...v1.0.83) (2019-04-30)



<a name="1.0.82"></a>
## [1.0.82](https://github.com/surveyjs/widgets/compare/v1.0.81...v1.0.82) (2019-04-23)



<a name="1.0.81"></a>
## [1.0.81](https://github.com/surveyjs/widgets/compare/v1.0.80...v1.0.81) (2019-04-16)



<a name="1.0.80"></a>
## [1.0.80](https://github.com/surveyjs/widgets/compare/v1.0.79...v1.0.80) (2019-04-16)



<a name="1.0.79"></a>
## [1.0.79](https://github.com/surveyjs/widgets/compare/v1.0.78...v1.0.79) (2019-04-10)



<a name="1.0.78"></a>
## [1.0.78](https://github.com/surveyjs/widgets/compare/v1.0.77...v1.0.78) (2019-04-02)



<a name="1.0.77"></a>
## [1.0.77](https://github.com/surveyjs/widgets/compare/v1.0.76...v1.0.77) (2019-03-27)



<a name="1.0.76"></a>
## [1.0.76](https://github.com/surveyjs/widgets/compare/v1.0.75...v1.0.76) (2019-03-27)



<a name="1.0.75"></a>
## [1.0.75](https://github.com/surveyjs/widgets/compare/v1.0.74...v1.0.75) (2019-03-19)



<a name="1.0.74"></a>
## [1.0.74](https://github.com/surveyjs/widgets/compare/v1.0.73...v1.0.74) (2019-03-12)



<a name="1.0.73"></a>
## [1.0.73](https://github.com/surveyjs/widgets/compare/v1.0.72...v1.0.73) (2019-03-05)



<a name="1.0.72"></a>
## [1.0.72](https://github.com/surveyjs/widgets/compare/v1.0.71...v1.0.72) (2019-02-27)



<a name="1.0.71"></a>
## [1.0.71](https://github.com/surveyjs/widgets/compare/v1.0.69...v1.0.71) (2019-02-19)



<a name="1.0.69"></a>
## [1.0.69](https://github.com/surveyjs/widgets/compare/v1.0.68...v1.0.69) (2019-02-13)



<a name="1.0.68"></a>
## [1.0.68](https://github.com/surveyjs/widgets/compare/v1.0.67...v1.0.68) (2019-02-07)



<a name="1.0.67"></a>
## [1.0.67](https://github.com/surveyjs/widgets/compare/v1.0.66...v1.0.67) (2019-02-05)



<a name="1.0.66"></a>
## [1.0.66](https://github.com/surveyjs/widgets/compare/v1.0.65...v1.0.66) (2019-01-29)



<a name="1.0.65"></a>
## [1.0.65](https://github.com/surveyjs/widgets/compare/v1.0.64...v1.0.65) (2019-01-22)



<a name="1.0.64"></a>
## [1.0.64](https://github.com/surveyjs/widgets/compare/v1.0.63...v1.0.64) (2019-01-15)



<a name="1.0.63"></a>
## [1.0.63](https://github.com/surveyjs/widgets/compare/v1.0.62...v1.0.63) (2018-12-28)



<a name="1.0.62"></a>
## [1.0.62](https://github.com/surveyjs/widgets/compare/v1.0.61...v1.0.62) (2018-12-27)



<a name="1.0.61"></a>
## [1.0.61](https://github.com/surveyjs/widgets/compare/v1.0.60...v1.0.61) (2018-12-19)



<a name="1.0.60"></a>
## [1.0.60](https://github.com/surveyjs/widgets/compare/v1.0.59...v1.0.60) (2018-12-11)



<a name="1.0.59"></a>
## [1.0.59](https://github.com/surveyjs/widgets/compare/v1.0.58...v1.0.59) (2018-12-04)



<a name="1.0.58"></a>
## [1.0.58](https://github.com/surveyjs/widgets/compare/v1.0.57...v1.0.58) (2018-11-28)



<a name="1.0.57"></a>
## [1.0.57](https://github.com/surveyjs/widgets/compare/v1.0.56...v1.0.57) (2018-11-27)



<a name="1.0.56"></a>
## [1.0.56](https://github.com/surveyjs/widgets/compare/v1.0.55...v1.0.56) (2018-11-20)



<a name="1.0.55"></a>
## [1.0.55](https://github.com/surveyjs/widgets/compare/v1.0.54...v1.0.55) (2018-11-14)



<a name="1.0.54"></a>
## [1.0.54](https://github.com/surveyjs/widgets/compare/v1.0.53...v1.0.54) (2018-11-13)



<a name="1.0.53"></a>
## [1.0.53](https://github.com/surveyjs/widgets/compare/v1.0.52...v1.0.53) (2018-10-30)



<a name="1.0.52"></a>
## [1.0.52](https://github.com/surveyjs/widgets/compare/v1.0.51...v1.0.52) (2018-10-23)



<a name="1.0.51"></a>
## [1.0.51](https://github.com/surveyjs/widgets/compare/v1.0.50...v1.0.51) (2018-10-23)



<a name="1.0.50"></a>
## [1.0.50](https://github.com/surveyjs/widgets/compare/v1.0.49...v1.0.50) (2018-10-16)



<a name="1.0.49"></a>
## [1.0.49](https://github.com/surveyjs/widgets/compare/v1.0.48...v1.0.49) (2018-10-09)



<a name="1.0.48"></a>
## [1.0.48](https://github.com/surveyjs/widgets/compare/v1.0.47...v1.0.48) (2018-10-03)



<a name="1.0.47"></a>
## [1.0.47](https://github.com/surveyjs/widgets/compare/v1.0.46...v1.0.47) (2018-10-02)



<a name="1.0.46"></a>
## [1.0.46](https://github.com/surveyjs/widgets/compare/v1.0.45...v1.0.46) (2018-09-26)



<a name="1.0.45"></a>
## [1.0.45](https://github.com/surveyjs/widgets/compare/v1.0.44...v1.0.45) (2018-09-25)



<a name="1.0.44"></a>
## [1.0.44](https://github.com/surveyjs/widgets/compare/v1.0.43...v1.0.44) (2018-09-18)



<a name="1.0.43"></a>
## [1.0.43](https://github.com/surveyjs/widgets/compare/v1.0.42...v1.0.43) (2018-09-11)



<a name="1.0.42"></a>
## [1.0.42](https://github.com/surveyjs/widgets/compare/v1.0.41...v1.0.42) (2018-09-04)



<a name="1.0.41"></a>
## [1.0.41](https://github.com/surveyjs/widgets/compare/v1.0.40...v1.0.41) (2018-08-29)



<a name="1.0.40"></a>
## [1.0.40](https://github.com/surveyjs/widgets/compare/v1.0.39...v1.0.40) (2018-08-28)



<a name="1.0.39"></a>
## [1.0.39](https://github.com/surveyjs/widgets/compare/v1.0.38...v1.0.39) (2018-08-21)



<a name="1.0.38"></a>
## [1.0.38](https://github.com/surveyjs/widgets/compare/v1.0.37...v1.0.38) (2018-08-17)



<a name="1.0.37"></a>
## [1.0.37](https://github.com/surveyjs/widgets/compare/v1.0.36...v1.0.37) (2018-08-07)



<a name="1.0.36"></a>
## [1.0.36](https://github.com/surveyjs/widgets/compare/v1.0.35...v1.0.36) (2018-08-02)



<a name="1.0.35"></a>
## [1.0.35](https://github.com/surveyjs/widgets/compare/v1.0.34...v1.0.35) (2018-07-26)



<a name="1.0.34"></a>
## [1.0.34](https://github.com/surveyjs/widgets/compare/1.0.30...1.0.34) (2018-07-24)

================
File: deploy_npm.sh
================
cd package
printf "//registry.npmjs.org/:_authToken=${NPM_TOKEN}\n" >> ./.npmrc
npm publish .

================
File: devops-integration.yml
================
# SurveyJS Widgets integration builds

trigger:
  batch: true
  branches:
    include:
      - master
  tags:
    exclude:
      - v*.*.*

pool:
  vmImage: "Ubuntu-20.04"

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "14.x"
    displayName: "Install Node.js"

  - task: CopyFiles@2
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/"
      Contents: "package.json"
      TargetFolder: "$(Build.SourcesDirectory)/Temp/"
      OverWrite: true
    displayName: "Copy package.json for cache key"
  - task: Cache@2
    inputs:
      key: 'npm-cache-custom-widgets | $(Build.SourcesDirectory)/Temp/package.json'
      path: $(Build.SourcesDirectory)/node_modules
      cacheHitVar: NPM_CACHE_RESTORED
    displayName: Cache NPM

  - task: Npm@1
    displayName: 'NPM install'
    inputs:
      command: install
      verbose: false
    condition: ne(variables.NPM_CACHE_RESTORED, 'true')

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      project: 'af2804d2-859a-4705-9ef5-cdf46d1d5d4f'
      pipeline: '56'
      specificBuildWithTriggering: true
      buildVersionToDownload: 'latest'
      downloadType: 'single'
      artifactName: 'SurveyJSLibraryBuildCoreAngularJquery'
      downloadPath: '$(System.ArtifactsDirectory)'

  - task: CopyFiles@2
    inputs:
      SourceFolder: "$(System.ArtifactsDirectory)/SurveyJSLibraryBuildCoreAngularJquery/packages/survey-core"
      Contents: "**"
      TargetFolder: "$(Build.Repository.LocalPath)/node_modules/survey-core"
      OverWrite: true

# npm run release with version
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(System.ArtifactsDirectory)/SurveyJSLibraryBuildCoreAngularJquery/'
      Contents: 'version.txt'
      TargetFolder: '$(Build.SourcesDirectory)/'
      OverWrite: true
    displayName: 'Copy Build Artifact - SurveyJSVersion File'

  - powershell: |
      $version = Get-Content $(Build.SourcesDirectory)/version.txt
      Write-Host "##vso[task.setvariable variable=SurveyJSVersion;]$version"
    displayName: 'setup SurveyJSVersion variable from SurveyJSVersionFile'

  - powershell: |
      $env:GIT_REDIRECT_STDERR = '2>&1'
      git config --global user.email "kurmanov.work@gmail.com"
      git config --global user.name "dmitrykurmanov"
      npm run release -- --release-as $(SurveyJSVersion)
    displayName: 'npm run release specific version'
#####################################################
  
  - script: |
      npm run build
    displayName: "build"

  - script: |
      npm run testcafe:ci
    displayName: "run functional tests"

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)/package'
      targetFolder: $(Build.ArtifactStagingDirectory)/SurveyJSWidgetsBuild/packages/survey-widgets

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/SurveyJSWidgetsBuild/'
      ArtifactName: 'SurveyJSWidgetsBuild'
      publishLocation: 'Container'

================
File: LICENSE
================
MIT License

Copyright (c) 2015-2019 Devsoft Baltic OÜ - http://surveyjs.io/

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: package.json
================
{
  "name": "surveyjs-widgets",
  "version": "1.12.5",
  "scripts": {
    "start": "npm run build && live-server",
    "watch": "webpack --env buildType=dev --watch",
    "prebuild": "webpack --env buildType=dev",
    "build": "webpack --env buildType=prod",
    "release": "standard-version --message \"Release: %s [azurepipelines skip]\"",
    "testcafe": "testcafe chrome --app \"http-server\" testcafe/ --selector-timeout 1500",
    "testcafe:ci": "testcafe chrome:headless --app \"http-server\" testcafe/ --selector-timeout 1500 ",
    "testcafe_file": "testcafe chrome --app \"http-server\" testCafe/tagbox.ts --selector-timeout 1500 --reporter minimal"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/surveyjs/custom-widgets.git"
  },
  "private": true,
  "devDependencies": {
    "@babel/core": "^7.16.12",
    "bootstrap-slider": "^10.6.2",
    "clean-webpack-plugin": "^0.1.17",
    "colors": "1.4.0",
    "concurrently": "^6.2.1",
    "copy-webpack-plugin": "^11.0.0",
    "easy-autocomplete": "^1.3.5",
    "friendly-errors-webpack-plugin": "^1.6.1",
    "generate-package-json-webpack-plugin": "^2.6.0",
    "http-server": "^13.0.2",
    "icheck": "^1.0.2",
    "inputmask": "~5.0.3",
    "jquery": "^3.5.0",
    "jquery-bar-rating": "^1.2.2",
    "jquery-ui": "^1.13.2",
    "live-server": "^1.2.0",
    "nouislider": "latest",
    "pretty-checkbox": "^3.0.3",
    "recordrtc": "^5.5.8",
    "select2": "^4.0.8",
    "sortablejs": "^1.9.0",
    "standard-version": "^9.5.0",
    "survey-angular": "^1.9.46",
    "survey-jquery": "^1.9.46",
    "survey-knockout": "^1.9.46",
    "survey-react": "^1.9.46",
    "survey-vue": "^1.9.46",
    "svg-inline-loader": "^0.8.2",
    "testcafe": "1.16.1",
    "text-loader": "0.0.1",
    "virtual-module-webpack-plugin": "^0.3.0",
    "webpack": "^5.74.0",
    "webpack-cli": "^4.9.2"
  }
}

================
File: README.md
================
## Widgets 
[![Build.Node.js CI](https://github.com/surveyjs/custom-widgets/actions/workflows/build.node.js.yml/badge.svg)](https://github.com/surveyjs/custom-widgets/actions/workflows/build.node.js.yml)

[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](LICENSE)

- select2: [site](https://select2.org/), [repo](https://github.com/select2/select2), license: MIT

- select2tagbox: [site](https://select2.org/), [repo](https://github.com/select2/select2), license: MIT

- icheck: [site](http://icheck.fronteed.com/), [repo](https://github.com/fronteed/iCheck/), license: MIT

- inputmask: [site](http://robinherbots.github.io/Inputmask/), [repo](https://github.com/RobinHerbots/Inputmask), license: MIT

- jquerybarrating: [site](http://antenna.io/demo/jquery-bar-rating/examples/), [repo](https://github.com/antennaio/jquery-bar-rating), license: MIT

- jqueryuidatepicker: [site](https://jqueryui.com/datepicker/), [repo](https://github.com/jquery/jquery-ui), license: https://github.com/jquery/jquery-ui/blob/master/LICENSE.txt

- nouislider: [site](https://refreshless.com/nouislider/), [repo](https://github.com/leongersen/noUiSlider), license: https://github.com/leongersen/noUiSlider/blob/master/LICENSE

- sortablejs: [site](http://sortablejs.github.io/Sortable/), [repo](https://github.com/RubaXa/Sortable), license: MIT

- ckeditor: [site](https://ckeditor.com/ckeditor-4/), [repo](https://github.com/ckeditor/ckeditor-dev), license: https://github.com/ckeditor/ckeditor-dev/blob/major/LICENSE.md

- pretty-checkbox: [site](https://lokesh-coder.github.io/pretty-checkbox/), [repo](https://github.com/lokesh-coder/pretty-checkbox/), license: https://github.com/lokesh-coder/pretty-checkbox/blob/master/LICENSE

- bootstrap-slider: [site](http://seiyria.com/bootstrap-slider/), [repo](https://github.com/seiyria/bootstrap-slider), license: https://github.com/seiyria/bootstrap-slider/blob/master/LICENSE.md

- recordrtc: [site](http://recordrtc.org/), [repo](https://github.com/muaz-khan/RecordRTC), license [MIT](http://spdx.org/licenses/MIT.html)

- imageHotArea [repo](https://github.com/TheNetworg/surveyjs-plugin-hotarea), licence: MIT

## Getting started

es5 examples: https://surveyjs.io/Examples/Library/?id=custom-widget-select2-tagbox  
es modules examples: https://stackblitz.com/edit/surveyjs-widgets-react

Install the library using es5.

```
<script src="https://unpkg.com/surveyjs-widgets"></script>
```

Install the library using npm.

```
npm install surveyjs-widgets
```

Or use unpkg CDN:
https://unpkg.com/surveyjs-widgets@{version-number}/surveyjs-widgets.min.js

You find all versions/builds in the [surveyjs/build repo](https://github.com/surveyjs/builds).

## Building surveyjs-widgets from sources

To build library yourself:

1.  **Clone the repo from GitHub**

    ```
    git clone https://github.com/surveyjs/widgets.git
    cd surveyjs-widgets
    ```

2.  **Acquire build dependencies.** Make sure you have [Node.js](http://nodejs.org/) installed on your workstation. This is only needed to _build_ surveyjs from sources.

    ```
    npm install
    ```

3.  **Build the library**

    ```
    npm run build
    ```

    After that you should have the libraries (angular, jquery, knockout, react and vue) at 'packages' directory.

4.  **Add your own custom widget**

    Please go to [this plunker](https://plnkr.co/edit/dL5LwrEmGZsCfsPW) and select `customwidget.js` to review the code and comments.

    The [same plunker example](https://plnkr.co/edit/8092Z3gQseG32fOA), but for Survey Creator / Form Builder

## License

[MIT license](https://github.com/surveyjs/widgets/blob/master/LICENSE)

================
File: release-azure-pipeline.yml
================
#SurveyJS release pipeline (widgets)

#trigger only "by hand"
trigger: none
pr: none

pool:
  vmImage: 'Ubuntu-16.04'

steps:

- checkout: self
  persistCredentials: true
  clean: true

- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'specific'
    project: '9434af9c-19e5-4e5d-8bd7-2d9129d3fed4'
    pipeline: '31'
    specificBuildWithTriggering: true
    buildVersionToDownload: 'latest'
    downloadType: 'single'
    artifactName: 'SurveyJSVersionFile'
    downloadPath: '$(System.ArtifactsDirectory)'
  displayName: 'Download Build Artifact - SurveyJSVersionFile'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.ArtifactsDirectory)/SurveyJSVersionFile/'
    Contents: 'version.txt'
    TargetFolder: '$(Build.Repository.LocalPath)/'
    OverWrite: true
  displayName: 'Copy Build Artifact - SurveyJSVersionFile'

- powershell: |
    $version = Get-Content $(Build.Repository.LocalPath)/version.txt
    Write-Host "##vso[task.setvariable variable=SurveyJSVersion;]$version"
  displayName: 'setup SurveyJSVersion variable from SurveyJSVersionFile'

- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'install Node.js'

- script: |
    npm install
  displayName: 'npm install'

- powershell: |
    echo $(git --version)
    git config --global user.email "kurmanov.work@gmail.com"
    git config --global user.name "dmitrykurmanov"
    git checkout master
    git pull origin master
    git fetch --tags --force
    npm run release -- --release-as $(SurveyJSVersion)
  displayName: 'npm run release with SurveyJSVersion'

- script: |
    npm run build
  displayName: "build"

- script: |
    npm run testcafe:ci
  displayName: "run functional tests"

- powershell: |
    git pull origin master
    git push --follow-tags origin master;
  displayName: 'push release commit to github'

- task: Npm@1
  inputs:
    command: "publish"
    workingDir: "package"
    publishEndpoint: "NPM Registry"
    verbose: true
  displayName: 'npm publish surveyjs-widgets'

#trigger next build via the artifact file 'version.txt'
- task: CopyFiles@2
  inputs:
    contents: 'version.txt'
    targetFolder: $(Build.ArtifactStagingDirectory)
  displayName: 'copy version file to Build.ArtifactStagingDirectory'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'SurveyJSVersionFile'
    publishLocation: 'Container'
  displayName: 'Publish Build Artifact - SurveyJSVersionFile'

================
File: webpack.config.js
================
"use strict";

var webpack = require("webpack");
var path = require("path");
var FriendlyErrorsWebpackPlugin = require("friendly-errors-webpack-plugin");
var CopyWebpackPlugin = require("copy-webpack-plugin");
const GeneratePackageJsonPlugin = require('generate-package-json-webpack-plugin');
var CleanWebpackPlugin = require("clean-webpack-plugin");

var packageJson = require("./package.json");

const today = new Date();
const year = today.getFullYear();

var copyright = [
  "surveyjs-widgets - Widgets for the SurveyJS library v" + packageJson.version,
  "Copyright (c) 2015-" + year + " Devsoft Baltic OÜ  - http://surveyjs.io/",
  "License: MIT (http://www.opensource.org/licenses/mit-license.php)"
].join("\n");

var outputFolder = "package";

var main = "surveyjs-widgets";

var widgets = [
  main,
  "select2",
  "select2-tagbox",
  "jquery-ui-datepicker",
  "inputmask",
  "icheck",
  "jquery-bar-rating",
  "sortablejs",
  "nouislider",
  "ck-editor",
  "easy-autocomplete",
  "pretty-checkbox",
  "bootstrap-slider",
  "microphone",
  "emotionsratings"
];

var dependencies = {
  select2: "^4.0.4",
  icheck: "^1.0.2",
  "jquery-ui": "^1.12.1",
  sortablejs: "^1.6.1",
  nouislider: "^14.6.3",
  inputmask: "^5.0.3",
  "jquery-bar-rating": "^1.2.2",
  "pretty-checkbox": "^3.0.3",
  "bootstrap-slider": "^10.0.0",
  recordrtc: "^5.4.6",
  "emotion-ratings": "^2.0.1"
};

var entry = {};

module.exports = function (options) {
  var packagePath = `./${outputFolder}`;

  var targetPackageJson = {
    name: `surveyjs-widgets`,
    version: packageJson.version,
    description: "Custom widgets for the SurveyJS library",
    keywords: [
      "Survey",
      "JavaScript",
      "Bootstrap",
      "Library",
      "SurveyJS",
      "Widgets"
    ],
    homepage: "https://surveyjs.io/",
    license: "MIT",
    files: [],
    main: main + ".js",
    repository: {
      type: "git",
      url: "https://github.com/surveyjs/widgets.git"
    },
    dependencies: {
      jquery: "^3.2.1"
    },
    peerDependencies: {
      "easy-autocomplete": "^1.3.5"
    }
  };

  widgets.forEach(function (widget) {
    if (widget !== main) {
      targetPackageJson.files.push(`widgets/${widget}.js`);
      targetPackageJson.files.push(`widgets/${widget}.min.js`);
      targetPackageJson.files.push(`widgets/${widget}.min.js.map`);
      entry["widgets/" + widget] = path.join(__dirname, `./src/${widget}.js`);
    } else {
      targetPackageJson.files.push(`${widget}.js`);
      targetPackageJson.files.push(`${widget}.min.js`);
      targetPackageJson.files.push(`${widget}.min.js.map`);
      entry[widget] = path.join(__dirname, `./src/${widget}.js`);
    }
  });

  targetPackageJson.dependencies = Object.assign(
    targetPackageJson.dependencies,
    dependencies
  );

  var config = {
    entry: entry,
    output: {
      path: path.join(__dirname, packagePath),
      filename: `[name].${options.buildType === "prod" ? "min." : ""}js`,
      library: "[name]",
      libraryTarget: "umd",
      umdNamedDefine: true
    },
    externals: {
      jquery: {
        root: "jQuery",
        commonjs2: "jquery",
        commonjs: "jquery",
        amd: "jquery"
      },
      inputmask: {
        root: "Inputmask",
        commonjs2: "inputmask",
        commonjs: "inputmask",
        amd: "inputmask"
      },
      nouislider: {
        root: "noUiSlider",
        commonjs2: "nouislider",
        commonjs: "nouislider",
        amd: "nouislider"
      },
      sortablejs: {
        root: "Sortable",
        commonjs2: "sortablejs",
        commonjs: "sortablejs",
        amd: "sortablejs"
      },
      "bootstrap-slider": {
        root: "Slider",
        commonjs2: "bootstrap-slider",
        commonjs: "bootstrap-slider",
        amd: "bootstrap-slider"
      }
    },
    optimization: {
      minimize: options.buildType === "prod"
    },
    mode: options.buildType === "prod" ? "production" : "development",
    plugins: [
      new webpack.NoEmitOnErrorsPlugin(),
      new FriendlyErrorsWebpackPlugin()
    ],
    devtool: options.buildType === "prod" ? "source-map" : "inline-source-map",
    devServer: {
      contentBase: path.join(__dirname, outputFolder),
      open: true
    }
  };

  if (options.buildType === "dev") {
    config.plugins = config.plugins.concat([
      new CleanWebpackPlugin([outputFolder], { verbose: true })
    ]);
  }

  if (options.buildType === "prod") {
    config.plugins = config.plugins.concat([
      new webpack.BannerPlugin(copyright),
      new GeneratePackageJsonPlugin(targetPackageJson),
      new CopyWebpackPlugin({
        patterns: [
          {
            from: path.join(__dirname, "./src/targetREADME.md"),
            to: path.join(__dirname, `${packagePath}/README.md`)
          }
        ]
      })
    ]);
  }

  return config;
};
